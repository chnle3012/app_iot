This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-11T08:59:57.429Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
app/.gitignore
app/build.gradle.kts
app/proguard-rules.pro
app/src/androidTest/java/com/example/btl_iot/ExampleInstrumentedTest.java
app/src/main/AndroidManifest.xml
app/src/main/java/com/example/btl_iot/data/api/ApiClient.java
app/src/main/java/com/example/btl_iot/data/api/ApiService.java
app/src/main/java/com/example/btl_iot/data/api/AuthInterceptor.java
app/src/main/java/com/example/btl_iot/data/model/AddPersonResponse.java
app/src/main/java/com/example/btl_iot/data/model/History.java
app/src/main/java/com/example/btl_iot/data/model/HistoryResponse.java
app/src/main/java/com/example/btl_iot/data/model/LoginRequest.java
app/src/main/java/com/example/btl_iot/data/model/LoginResponse.java
app/src/main/java/com/example/btl_iot/data/model/PeopleResponse.java
app/src/main/java/com/example/btl_iot/data/model/Person.java
app/src/main/java/com/example/btl_iot/data/model/PersonDetailResponse.java
app/src/main/java/com/example/btl_iot/data/model/RegisterRequest.java
app/src/main/java/com/example/btl_iot/data/model/RegisterResponse.java
app/src/main/java/com/example/btl_iot/data/model/User.java
app/src/main/java/com/example/btl_iot/data/model/Warning.java
app/src/main/java/com/example/btl_iot/data/model/WarningResponse.java
app/src/main/java/com/example/btl_iot/data/repository/AuthRepository.java
app/src/main/java/com/example/btl_iot/data/repository/HistoryRepository.java
app/src/main/java/com/example/btl_iot/data/repository/PeopleRepository.java
app/src/main/java/com/example/btl_iot/data/repository/WarningRepository.java
app/src/main/java/com/example/btl_iot/MainActivity.java
app/src/main/java/com/example/btl_iot/MyApplication.java
app/src/main/java/com/example/btl_iot/ui/account/AccountFragment.java
app/src/main/java/com/example/btl_iot/ui/auth/LoginActivity.java
app/src/main/java/com/example/btl_iot/ui/auth/RegisterActivity.java
app/src/main/java/com/example/btl_iot/ui/auth/SplashActivity.java
app/src/main/java/com/example/btl_iot/ui/dashboard/MainDashboardActivity.java
app/src/main/java/com/example/btl_iot/ui/dashboard/MainDashboardFragment.java
app/src/main/java/com/example/btl_iot/ui/history/HistoryAdapter.java
app/src/main/java/com/example/btl_iot/ui/history/HistoryFragment.java
app/src/main/java/com/example/btl_iot/ui/people/AddEditPersonFragment.java
app/src/main/java/com/example/btl_iot/ui/people/PeopleAdapter.java
app/src/main/java/com/example/btl_iot/ui/people/PeopleManagementFragment.java
app/src/main/java/com/example/btl_iot/ui/warnings/WarningsAdapter.java
app/src/main/java/com/example/btl_iot/ui/warnings/WarningsFragment.java
app/src/main/java/com/example/btl_iot/util/Constants.java
app/src/main/java/com/example/btl_iot/util/FileUtils.java
app/src/main/java/com/example/btl_iot/util/ImageUtils.java
app/src/main/java/com/example/btl_iot/util/SharedPrefsUtils.java
app/src/main/java/com/example/btl_iot/viewmodel/AuthViewModel.java
app/src/main/java/com/example/btl_iot/viewmodel/HistoryViewModel.java
app/src/main/java/com/example/btl_iot/viewmodel/PeopleViewModel.java
app/src/main/java/com/example/btl_iot/viewmodel/WarningViewModel.java
app/src/main/java/com/example/btl_iot/viewmodel/WarningViewModelFactory.java
app/src/main/res/drawable/ic_history.xml
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/drawable/ic_warning.xml
app/src/main/res/layout/activity_login.xml
app/src/main/res/layout/activity_main_dashboard.xml
app/src/main/res/layout/activity_main.xml
app/src/main/res/layout/activity_register.xml
app/src/main/res/layout/activity_splash.xml
app/src/main/res/layout/fragment_account.xml
app/src/main/res/layout/fragment_add_edit_person.xml
app/src/main/res/layout/fragment_history.xml
app/src/main/res/layout/fragment_main_dashboard.xml
app/src/main/res/layout/fragment_people_management.xml
app/src/main/res/layout/fragment_warning.xml
app/src/main/res/layout/item_history.xml
app/src/main/res/layout/item_person.xml
app/src/main/res/layout/item_warning.xml
app/src/main/res/menu/bottom_nav_menu.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
app/src/main/res/navigation/nav_graph.xml
app/src/main/res/values-night/themes.xml
app/src/main/res/values/colors.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/themes.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/main/res/xml/file_paths.xml
app/src/test/java/com/example/btl_iot/ExampleUnitTest.java
build.gradle.kts
gradle.properties
gradle/libs.versions.toml
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
README.md
settings.gradle.kts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties
/.idea

================
File: app/.gitignore
================
/build

================
File: app/build.gradle.kts
================
plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace = "com.example.btl_iot"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.btl_iot"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    // AndroidX
    implementation(libs.appcompat)
    implementation(libs.material)
    implementation(libs.activity)
    implementation(libs.constraintlayout)
    
    // SwipeRefreshLayout
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
    
    // ViewModel and LiveData
    implementation("androidx.lifecycle:lifecycle-viewmodel:2.7.0")
    implementation("androidx.lifecycle:lifecycle-livedata:2.7.0")
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:2.7.0")
    implementation("androidx.lifecycle:lifecycle-common-java8:2.7.0")
    
    // Navigation Component
    implementation("androidx.navigation:navigation-fragment:2.7.7")
    implementation("androidx.navigation:navigation-ui:2.7.7")
    
    // Retrofit
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")
    
    // Gson
    implementation("com.google.code.gson:gson:2.10.1")
    
    // Glide for image loading
    implementation("com.github.bumptech.glide:glide:4.16.0")
    
    // Testing
    testImplementation(libs.junit)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)
}

================
File: app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: app/src/androidTest/java/com/example/btl_iot/ExampleInstrumentedTest.java
================
package com.example.btl_iot;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.btl_iot", appContext.getPackageName());
    }
}

================
File: app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Internet Permission -->
    <uses-permission android:name="android.permission.INTERNET" />
    <!-- Camera Permissions -->
    <uses-permission android:name="android.permission.CAMERA" />
    <!-- Storage Permissions -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="29" />
    <!-- For Android 13+ (API 33+) -->
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    
    <!-- Camera Feature -->
    <uses-feature android:name="android.hardware.camera" android:required="false" />

    <application
        android:name=".MyApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Btl_iot"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
        
        <activity
            android:name=".ui.auth.SplashActivity"
            android:exported="true"
            android:theme="@style/Theme.Btl_iot.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        
        <activity
            android:name=".ui.auth.LoginActivity"
            android:exported="false" />
            
        <activity
            android:name=".ui.auth.RegisterActivity"
            android:exported="false" />
        
        <activity
            android:name=".ui.dashboard.MainDashboardActivity"
            android:exported="false" />
        
        <activity
            android:name=".MainActivity"
            android:exported="true">
        </activity>

        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="${applicationId}.fileprovider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>
    </application>

</manifest>

================
File: app/src/main/java/com/example/btl_iot/data/api/ApiClient.java
================
package com.example.btl_iot.data.api;

import android.content.Context;

import com.example.btl_iot.util.Constants;
import com.example.btl_iot.MyApplication;

import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiClient {
    private static Retrofit retrofit;
    private static ApiService apiService;
    private static Context context;

    public static void init(Context appContext) {
        context = appContext;
    }

    public static synchronized ApiService getApiService() {
        if (context == null) {
            // If not initialized with init(), try to get application context
            context = MyApplication.getAppContext();
        }
        
        if (apiService == null) {
            apiService = getRetrofitInstance().create(ApiService.class);
        }
        return apiService;
    }

    private static Retrofit getRetrofitInstance() {
        if (retrofit == null) {
            // Add AuthInterceptor to add token to requests
            AuthInterceptor authInterceptor = new AuthInterceptor(context);
            
            OkHttpClient okHttpClient = new OkHttpClient.Builder()
                    .addInterceptor(authInterceptor)
                    .build();

            retrofit = new Retrofit.Builder()
                    .baseUrl(Constants.BASE_URL)
                    .client(okHttpClient)
                    .addConverterFactory(GsonConverterFactory.create())
                    .build();
        }
        return retrofit;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/api/ApiService.java
================
package com.example.btl_iot.data.api;

import com.example.btl_iot.data.model.AddPersonResponse;
import com.example.btl_iot.data.model.HistoryResponse;
import com.example.btl_iot.data.model.LoginRequest;
import com.example.btl_iot.data.model.LoginResponse;
import com.example.btl_iot.data.model.PeopleResponse;
import com.example.btl_iot.data.model.PersonDetailResponse;
import com.example.btl_iot.data.model.RegisterRequest;
import com.example.btl_iot.data.model.RegisterResponse;
import com.example.btl_iot.data.model.WarningResponse;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.Field;
import retrofit2.http.FormUrlEncoded;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Query;

public interface ApiService {
    @POST("api/auth/login")
    Call<LoginResponse> login(@Body LoginRequest loginRequest);
    
    @POST("api/auth/register")
    Call<RegisterResponse> register(@Body RegisterRequest registerRequest);
    
    @GET("api/people")
    Call<PeopleResponse> getPeople();
    
    @GET("api/people/{peopleId}")
    Call<PersonDetailResponse> getPersonDetail(@Path("peopleId") int peopleId);
    
    @Multipart
    @POST("api/people")
    Call<AddPersonResponse> addPerson(
            @Part("name") RequestBody name,
            @Part("age") RequestBody age,
            @Part MultipartBody.Part file
    );
    
    @Multipart
    @PUT("api/people/{peopleId}")
    Call<AddPersonResponse> updatePerson(
            @Path("peopleId") int peopleId,
            @Part("name") RequestBody name,
            @Part("age") RequestBody age,
            @Part MultipartBody.Part file
    );
    
    @FormUrlEncoded
    @PUT("api/people/{peopleId}")
    Call<AddPersonResponse> updatePersonWithoutImage(
            @Path("peopleId") int peopleId,
            @Field("name") String name,
            @Field("age") int age
    );

    @GET("api/history")
    Call<HistoryResponse> getHistory(
            @Header("Authorization") String token,
            @Query("page") Integer page,
            @Query("limit") Integer limit,
            @Query("start") String start,
            @Query("end") String end
    );

    @GET("api/warning")
    Call<WarningResponse> getWarning(
            @Header("Authorization") String token,
            @Query("page") Integer page,
            @Query("limit") Integer limit,
            @Query("start") String start,
            @Query("end") String end
    );
}

================
File: app/src/main/java/com/example/btl_iot/data/api/AuthInterceptor.java
================
package com.example.btl_iot.data.api;

import android.content.Context;

import com.example.btl_iot.util.SharedPrefsUtils;

import java.io.IOException;

import okhttp3.Interceptor;
import okhttp3.Request;
import okhttp3.Response;

public class AuthInterceptor implements Interceptor {
    private Context context;

    public AuthInterceptor(Context context) {
        this.context = context;
    }

    @Override
    public Response intercept(Chain chain) throws IOException {
        Request originalRequest = chain.request();
        
        // Kiểm tra URL của request để xác định có cần thêm token hay không
        String url = originalRequest.url().toString();
        
        // Không thêm token cho các API login và register
        if (url.contains("api/auth/login") || url.contains("api/auth/register")) {
            return chain.proceed(originalRequest);
        }
        
        // Get token from SharedPreferences
        String token = SharedPrefsUtils.getAuthToken(context);
        
        // If token is null or empty, proceed with the original request
        if (token == null || token.isEmpty()) {
            return chain.proceed(originalRequest);
        }
        
        // Add token to the header
        Request newRequest = originalRequest.newBuilder()
                .header("Authorization", token)
                .build();
        
        return chain.proceed(newRequest);
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/AddPersonResponse.java
================
package com.example.btl_iot.data.model;

import com.google.gson.annotations.SerializedName;

public class AddPersonResponse {
    private boolean success;
    private String message;
    private Person data;

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public Person getData() {
        return data;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/History.java
================
package com.example.btl_iot.data.model;

import com.google.gson.annotations.SerializedName;

public class History {
    private long historyId;
    private String timestamp;
    private People people;
    private String imagePath;
    private String mode;

    public long getHistoryId() {
        return historyId;
    }

    public String getTimestamp() {
        return timestamp;
    }

    public People getPeople() {
        return people;
    }

    public String getImagePath() {
        return imagePath;
    }

    public String getMode() {
        return mode;
    }

    public static class People {
        private long peopleId;
        private String name;
        private int age;
        private String faceImagePath;

        public long getPeopleId() {
            return peopleId;
        }

        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        public String getFaceImagePath() {
            return faceImagePath;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/HistoryResponse.java
================
package com.example.btl_iot.data.model;

import java.util.List;

public class HistoryResponse {
    private boolean success;
    private String message;
    private Data data;

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public Data getData() {
        return data;
    }

    public static class Data {
        private List<History> content;
        private int totalElements;
        private int totalPages;
        private boolean last;
        private boolean first;

        public List<History> getContent() {
            return content;
        }

        public int getTotalElements() {
            return totalElements;
        }

        public int getTotalPages() {
            return totalPages;
        }

        public boolean isLast() {
            return last;
        }

        public boolean isFirst() {
            return first;
        }
    }

    public static class History {
        private int historyId;
        private String timestamp;
        private People people;
        private String imagePath;
        private String mode;

        public int getHistoryId() {
            return historyId;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public People getPeople() {
            return people;
        }

        public String getImagePath() {
            return imagePath;
        }

        public String getMode() {
            return mode;
        }
    }

    public static class People {
        private String name;

        public String getName() {
            return name;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/LoginRequest.java
================
package com.example.btl_iot.data.model;

public class LoginRequest {
    private String username;
    private String password;

    public LoginRequest(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/LoginResponse.java
================
package com.example.btl_iot.data.model;

import com.google.gson.annotations.SerializedName;

public class LoginResponse {
    private boolean success;
    private String message;
    private TokenData data;

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public TokenData getData() {
        return data;
    }

    public static class TokenData {
        private String token;
        
        @SerializedName("tokenType")
        private String tokenType;
        
        private long expiration;

        public String getToken() {
            return token;
        }

        public String getTokenType() {
            return tokenType;
        }

        public long getExpiration() {
            return expiration;
        }
        
        public String getFormattedToken() {
            return tokenType + " " + token;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/PeopleResponse.java
================
package com.example.btl_iot.data.model;

import com.google.gson.annotations.SerializedName;
import java.util.List;

public class PeopleResponse {
    private boolean success;
    private String message;
    private PeopleData data;

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public PeopleData getData() {
        return data;
    }

    public static class PeopleData {
        private List<Person> content;
        private Pageable pageable;
        private boolean last;
        private int totalElements;
        private int totalPages;
        private boolean first;
        private int size;
        private int number;
        private Sort sort;
        private int numberOfElements;
        private boolean empty;

        public List<Person> getContent() {
            return content;
        }

        public int getTotalElements() {
            return totalElements;
        }

        public int getTotalPages() {
            return totalPages;
        }

        public int getNumberOfElements() {
            return numberOfElements;
        }
    }

    public static class Pageable {
        private int pageNumber;
        private int pageSize;
        private Sort sort;
        private int offset;
        private boolean paged;
        private boolean unpaged;
    }

    public static class Sort {
        private boolean sorted;
        private boolean empty;
        private boolean unsorted;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/Person.java
================
package com.example.btl_iot.data.model;

import com.google.gson.annotations.SerializedName;

public class Person {
    @SerializedName("peopleId")
    private int id;
    
    private String name;
    private int age;
    private String faceImagePath;

    public Person(int id, String name, int age, String faceImagePath) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.faceImagePath = faceImagePath;
    }

    public int getId() {
        return id;
    }
    
    public int getPeopleId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getFaceImagePath() {
        return faceImagePath;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/PersonDetailResponse.java
================
package com.example.btl_iot.data.model;

import com.google.gson.annotations.SerializedName;

public class PersonDetailResponse {
    private boolean success;
    private String message;
    private Person data;

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public Person getData() {
        return data;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/RegisterRequest.java
================
package com.example.btl_iot.data.model;

public class RegisterRequest {
    private String username;
    private String password;

    public RegisterRequest(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/RegisterResponse.java
================
package com.example.btl_iot.data.model;

public class RegisterResponse {
    private boolean success;
    private String message;
    private Object data;

    public boolean isSuccess() {
        return success;
    }

    public void setSuccess(boolean success) {
        this.success = success;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Object getData() {
        return data;
    }

    public void setData(Object data) {
        this.data = data;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/User.java
================
package com.example.btl_iot.data.model;

import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;

public class User implements Parcelable {
    private int id;
    private String name;
    private int age;
    private String imageUrl;
    private String gender;

    public User() {
        // Default constructor
    }

    public User(int id, String name, int age, String imageUrl) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.imageUrl = imageUrl;
    }
    
    public User(int id, String name, int age, String imageUrl, String gender) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.imageUrl = imageUrl;
        this.gender = gender;
    }

    protected User(Parcel in) {
        id = in.readInt();
        name = in.readString();
        age = in.readInt();
        imageUrl = in.readString();
        gender = in.readString();
    }

    public static final Creator<User> CREATOR = new Creator<User>() {
        @Override
        public User createFromParcel(Parcel in) {
            return new User(in);
        }

        @Override
        public User[] newArray(int size) {
            return new User[size];
        }
    };

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }
    
    public String getGender() {
        return gender;
    }
    
    public void setGender(String gender) {
        this.gender = gender;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeInt(id);
        dest.writeString(name);
        dest.writeInt(age);
        dest.writeString(imageUrl);
        dest.writeString(gender);
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/Warning.java
================
package com.example.btl_iot.data.model;

public class Warning {
    private String timestamp;
    private String imagePath;
    private String info;

    public String getTimestamp() {
        return timestamp;
    }

    public String getImagePath() {
        return imagePath;
    }

    public String getInfo() {
        return info;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/model/WarningResponse.java
================
package com.example.btl_iot.data.model;

import java.util.List;

public class WarningResponse {
    private boolean success;
    private String message;
    private Data data;

    public boolean isSuccess() {
        return success;
    }

    public String getMessage() {
        return message;
    }

    public Data getData() {
        return data;
    }

    public static class Data {
        private List<Warning> content;
        private int totalElements;
        private int totalPages;
        private boolean last;
        private boolean first;

        public List<Warning> getContent() {
            return content;
        }

        public int getTotalElements() {
            return totalElements;
        }

        public int getTotalPages() {
            return totalPages;
        }

        public boolean isLast() {
            return last;
        }

        public boolean isFirst() {
            return first;
        }
    }

    public static class Warning {
        private int id;
        private String info; // Thay từ message thành info
        private String timestamp;
        private String imagePath; // Thêm imagePath nếu cần sử dụng

        // Getter và Setter cho id
        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        // Getter và Setter cho info (thay vì message)
        public String getInfo() {
            return info;
        }

        public void setInfo(String info) {
            this.info = info;
        }

        // Getter và Setter cho timestamp
        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }

        // Getter và Setter cho imagePath (nếu cần)
        public String getImagePath() {
            return imagePath;
        }

        public void setImagePath(String imagePath) {
            this.imagePath = imagePath;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/repository/AuthRepository.java
================
package com.example.btl_iot.data.repository;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.example.btl_iot.data.api.ApiClient;
import com.example.btl_iot.data.api.ApiService;
import com.example.btl_iot.data.model.LoginRequest;
import com.example.btl_iot.data.model.LoginResponse;
import com.example.btl_iot.data.model.RegisterRequest;
import com.example.btl_iot.data.model.RegisterResponse;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class AuthRepository {
    private ApiService apiService;

    public AuthRepository() {
        this.apiService = ApiClient.getApiService();
    }

    public LiveData<Resource<LoginResponse>> login(String username, String password) {
        MutableLiveData<Resource<LoginResponse>> loginResult = new MutableLiveData<>();
        
        // Show loading state
        loginResult.setValue(Resource.loading(null));
        
        // Create login request
        LoginRequest loginRequest = new LoginRequest(username, password);
        
        // Make API call
        apiService.login(loginRequest).enqueue(new Callback<LoginResponse>() {
            @Override
            public void onResponse(Call<LoginResponse> call, Response<LoginResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    LoginResponse loginResponse = response.body();
                    if (loginResponse.isSuccess()) {
                        // Success response
                        loginResult.setValue(Resource.success(loginResponse));
                    } else {
                        // API returned an error message
                        loginResult.setValue(Resource.error(loginResponse.getMessage(), null));
                    }
                } else {
                    // HTTP error
                    String errorMsg = "Login failed. Please try again.";
                    loginResult.setValue(Resource.error(errorMsg, null));
                }
            }

            @Override
            public void onFailure(Call<LoginResponse> call, Throwable t) {
                // Network or other error
                String errorMsg = "Network error: " + t.getMessage();
                loginResult.setValue(Resource.error(errorMsg, null));
            }
        });
        
        return loginResult;
    }
    
    public LiveData<Resource<RegisterResponse>> register(String username, String password) {
        MutableLiveData<Resource<RegisterResponse>> registerResult = new MutableLiveData<>();
        
        // Show loading state
        registerResult.setValue(Resource.loading(null));
        
        // Create register request
        RegisterRequest registerRequest = new RegisterRequest(username, password);
        
        // Make API call
        apiService.register(registerRequest).enqueue(new Callback<RegisterResponse>() {
            @Override
            public void onResponse(Call<RegisterResponse> call, Response<RegisterResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    RegisterResponse registerResponse = response.body();
                    if (registerResponse.isSuccess()) {
                        // Success response
                        registerResult.setValue(Resource.success(registerResponse));
                    } else {
                        // API returned an error message
                        registerResult.setValue(Resource.error(registerResponse.getMessage(), null));
                    }
                } else {
                    // HTTP error
                    String errorMsg = "Registration failed. Please try again.";
                    registerResult.setValue(Resource.error(errorMsg, null));
                }
            }

            @Override
            public void onFailure(Call<RegisterResponse> call, Throwable t) {
                // Network or other error
                String errorMsg = "Network error: " + t.getMessage();
                registerResult.setValue(Resource.error(errorMsg, null));
            }
        });
        
        return registerResult;
    }
    
    // Resource class for handling loading, success, and error states
    public static class Resource<T> {
        public enum Status { SUCCESS, ERROR, LOADING }
        
        private final Status status;
        public final T data;
        private final String message;
        
        private Resource(Status status, T data, String message) {
            this.status = status;
            this.data = data;
            this.message = message;
        }
        
        public static <T> Resource<T> success(T data) {
            return new Resource<>(Status.SUCCESS, data, null);
        }
        
        public static <T> Resource<T> error(String msg, T data) {
            return new Resource<>(Status.ERROR, data, msg);
        }
        
        public static <T> Resource<T> loading(T data) {
            return new Resource<>(Status.LOADING, data, null);
        }
        
        public Status getStatus() {
            return status;
        }
        
        public T getData() {
            return data;
        }
        
        public String getMessage() {
            return message;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/repository/HistoryRepository.java
================
package com.example.btl_iot.data.repository;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.example.btl_iot.data.api.ApiClient;
import com.example.btl_iot.data.api.ApiService;
import com.example.btl_iot.data.model.HistoryResponse;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class HistoryRepository {
    private ApiService apiService;

    public HistoryRepository() {
        this.apiService = ApiClient.getApiService();
    }

    // 5 tham số: token, page, limit, start, end
    public LiveData<AuthRepository.Resource<HistoryResponse>> getHistory(
            String token, Integer page, Integer limit, String start, String end
    ) {
        MutableLiveData<AuthRepository.Resource<HistoryResponse>> historyResult = new MutableLiveData<>();
        historyResult.setValue(AuthRepository.Resource.loading(null));

        apiService.getHistory(token, page, limit, start, end).enqueue(new Callback<HistoryResponse>() {
            @Override
            public void onResponse(Call<HistoryResponse> call, Response<HistoryResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    historyResult.setValue(AuthRepository.Resource.success(response.body()));
                } else {
                    String errorMessage = "Failed to fetch history. Error code: " + response.code();
                    historyResult.setValue(AuthRepository.Resource.error(errorMessage, null));
                }
            }

            @Override
            public void onFailure(Call<HistoryResponse> call, Throwable t) {
                historyResult.setValue(AuthRepository.Resource.error("Network error: " + t.getMessage(), null));
            }
        });

        return historyResult;
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/repository/PeopleRepository.java
================
package com.example.btl_iot.data.repository;

import android.content.Context;
import android.net.Uri;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.example.btl_iot.data.api.ApiClient;
import com.example.btl_iot.data.api.ApiService;
import com.example.btl_iot.data.model.AddPersonResponse;
import com.example.btl_iot.data.model.PeopleResponse;
import com.example.btl_iot.data.model.Person;
import com.example.btl_iot.data.model.PersonDetailResponse;
import com.example.btl_iot.util.FileUtils;

import java.io.File;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class PeopleRepository {
    private static final String TAG = "PeopleRepository";
    
    private final ApiService apiService;
    private final MutableLiveData<Resource<List<Person>>> peopleList = new MutableLiveData<>();
    private final MutableLiveData<Resource<Person>> addPersonResult = new MutableLiveData<>();
    private final MutableLiveData<Resource<Person>> personDetailResult = new MutableLiveData<>();
    private final MutableLiveData<Resource<Person>> updatePersonResult = new MutableLiveData<>();

    public PeopleRepository() {
        this.apiService = ApiClient.getApiService();
    }

    public LiveData<Resource<List<Person>>> getPeopleList() {
        loadPeopleFromApi();
        return peopleList;
    }

    public LiveData<Resource<Person>> getPersonDetail(int peopleId) {
        // Show loading state
        personDetailResult.setValue(Resource.loading(null));
        
        // Make API call
        apiService.getPersonDetail(peopleId).enqueue(new Callback<PersonDetailResponse>() {
            @Override
            public void onResponse(Call<PersonDetailResponse> call, Response<PersonDetailResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    PersonDetailResponse detailResponse = response.body();
                    if (detailResponse.isSuccess() && detailResponse.getData() != null) {
                        Person person = detailResponse.getData();
                        personDetailResult.setValue(Resource.success(person));
                    } else {
                        String errorMsg = detailResponse.getMessage() != null ? 
                                detailResponse.getMessage() : "Lỗi khi lấy chi tiết người dùng";
                        personDetailResult.setValue(Resource.error(errorMsg, null));
                    }
                } else {
                    personDetailResult.setValue(Resource.error("Lỗi: " + response.code(), null));
                }
            }

            @Override
            public void onFailure(Call<PersonDetailResponse> call, Throwable t) {
                Log.e(TAG, "API call failed", t);
                personDetailResult.setValue(Resource.error("Lỗi kết nối: " + t.getMessage(), null));
            }
        });
        
        return personDetailResult;
    }

    public LiveData<Resource<Person>> addPerson(String name, int age, Uri imageUri, Context context) {
        // Show loading state
        addPersonResult.setValue(Resource.loading(null));
        
        try {
            // Tạo RequestBody cho name và age
            RequestBody nameBody = RequestBody.create(MediaType.parse("text/plain"), name);
            RequestBody ageBody = RequestBody.create(MediaType.parse("text/plain"), String.valueOf(age));
            
            // Tạo MultipartBody.Part cho file ảnh
            File imageFile = FileUtils.getFileFromUri(context, imageUri);
            if (imageFile == null) {
                addPersonResult.setValue(Resource.error("Không thể đọc file ảnh", null));
                return addPersonResult;
            }
            
            RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), imageFile);
            MultipartBody.Part filePart = MultipartBody.Part.createFormData("file", imageFile.getName(), requestFile);
            
            // Gọi API
            apiService.addPerson(nameBody, ageBody, filePart).enqueue(new Callback<AddPersonResponse>() {
                @Override
                public void onResponse(Call<AddPersonResponse> call, Response<AddPersonResponse> response) {
                    if (response.isSuccessful() && response.body() != null) {
                        AddPersonResponse addResponse = response.body();
                        if (addResponse.isSuccess() && addResponse.getData() != null) {
                            Person newPerson = addResponse.getData();
                            addPersonResult.setValue(Resource.success(newPerson));
                        } else {
                            String errorMsg = addResponse.getMessage() != null ? 
                                    addResponse.getMessage() : "Lỗi khi thêm người dùng";
                            addPersonResult.setValue(Resource.error(errorMsg, null));
                        }
                    } else {
                        addPersonResult.setValue(Resource.error("Lỗi: " + response.code(), null));
                    }
                }

                @Override
                public void onFailure(Call<AddPersonResponse> call, Throwable t) {
                    Log.e(TAG, "API call failed", t);
                    addPersonResult.setValue(Resource.error("Lỗi kết nối: " + t.getMessage(), null));
                }
            });
        } catch (Exception e) {
            Log.e(TAG, "Error creating request", e);
            addPersonResult.setValue(Resource.error("Lỗi: " + e.getMessage(), null));
        }
        
        return addPersonResult;
    }
    
    public LiveData<Resource<Person>> updatePerson(int peopleId, String name, int age, Uri imageUri, Context context) {
        // Show loading state
        updatePersonResult.setValue(Resource.loading(null));
        
        try {
            // Kiểm tra xem có ảnh mới cần upload không
            boolean hasNewImage = imageUri != null && !imageUri.toString().startsWith("http");
            
            if (hasNewImage) {
                // Có ảnh mới, sử dụng API updatePerson có kèm file
                Log.d(TAG, "Đang cập nhật người dùng với ảnh mới");
                
                // Tạo RequestBody cho name và age
                RequestBody nameBody = RequestBody.create(MediaType.parse("text/plain"), name);
                RequestBody ageBody = RequestBody.create(MediaType.parse("text/plain"), String.valueOf(age));
                
                // Tạo MultipartBody.Part cho file ảnh mới
                File imageFile = FileUtils.getFileFromUri(context, imageUri);
                if (imageFile == null) {
                    updatePersonResult.setValue(Resource.error("Không thể đọc file ảnh", null));
                    return updatePersonResult;
                }
                
                RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), imageFile);
                MultipartBody.Part filePart = MultipartBody.Part.createFormData("file", imageFile.getName(), requestFile);
                Log.d(TAG, "Đang upload ảnh mới: " + imageFile.getName());
                
                // Gọi API với ảnh
                apiService.updatePerson(peopleId, nameBody, ageBody, filePart).enqueue(new Callback<AddPersonResponse>() {
                    @Override
                    public void onResponse(Call<AddPersonResponse> call, Response<AddPersonResponse> response) {
                        handleUpdateResponse(response);
                    }

                    @Override
                    public void onFailure(Call<AddPersonResponse> call, Throwable t) {
                        Log.e(TAG, "API call failed", t);
                        updatePersonResult.setValue(Resource.error("Lỗi kết nối: " + t.getMessage(), null));
                    }
                });
            } else {
                // Không có ảnh mới, chỉ cập nhật thông tin cơ bản
                Log.d(TAG, "Đang cập nhật người dùng không kèm ảnh mới");
                
                // Gọi API không kèm ảnh
                apiService.updatePersonWithoutImage(peopleId, name, age).enqueue(new Callback<AddPersonResponse>() {
                    @Override
                    public void onResponse(Call<AddPersonResponse> call, Response<AddPersonResponse> response) {
                        handleUpdateResponse(response);
                    }

                    @Override
                    public void onFailure(Call<AddPersonResponse> call, Throwable t) {
                        Log.e(TAG, "API call failed", t);
                        updatePersonResult.setValue(Resource.error("Lỗi kết nối: " + t.getMessage(), null));
                    }
                });
            }
        } catch (Exception e) {
            Log.e(TAG, "Error creating request", e);
            updatePersonResult.setValue(Resource.error("Lỗi: " + e.getMessage(), null));
        }
        
        return updatePersonResult;
    }
    
    // Phương thức xử lý response chung cho cả hai trường hợp
    private void handleUpdateResponse(Response<AddPersonResponse> response) {
        if (response.isSuccessful() && response.body() != null) {
            AddPersonResponse updateResponse = response.body();
            if (updateResponse.isSuccess() && updateResponse.getData() != null) {
                Person updatedPerson = updateResponse.getData();
                updatePersonResult.setValue(Resource.success(updatedPerson));
            } else {
                String errorMsg = updateResponse.getMessage() != null ? 
                        updateResponse.getMessage() : "Lỗi khi cập nhật người dùng";
                updatePersonResult.setValue(Resource.error(errorMsg, null));
            }
        } else {
            String errorBody = null;
            try {
                if (response.errorBody() != null) {
                    errorBody = response.errorBody().string();
                }
            } catch (Exception e) {
                Log.e(TAG, "Không thể đọc error body", e);
            }
            
            String errorMsg = "Lỗi: " + response.code();
            if (errorBody != null && !errorBody.isEmpty()) {
                errorMsg += " - " + errorBody;
            }
            
            updatePersonResult.setValue(Resource.error(errorMsg, null));
        }
    }

    private void loadPeopleFromApi() {
        // Show loading state
        peopleList.setValue(Resource.loading(null));
        
        // Make API call
        apiService.getPeople().enqueue(new Callback<PeopleResponse>() {
            @Override
            public void onResponse(Call<PeopleResponse> call, Response<PeopleResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    PeopleResponse peopleResponse = response.body();
                    if (peopleResponse.isSuccess() && peopleResponse.getData() != null) {
                        List<Person> people = peopleResponse.getData().getContent();
                        peopleList.setValue(Resource.success(people));
                    } else {
                        String errorMsg = peopleResponse.getMessage() != null ? 
                                peopleResponse.getMessage() : "Error fetching people";
                        peopleList.setValue(Resource.error(errorMsg, null));
                    }
                } else {
                    peopleList.setValue(Resource.error("Error: " + response.code(), null));
                }
            }

            @Override
            public void onFailure(Call<PeopleResponse> call, Throwable t) {
                Log.e(TAG, "API call failed", t);
                peopleList.setValue(Resource.error("Network error: " + t.getMessage(), null));
            }
        });
    }
    
    // Resource class for handling loading, success, and error states
    public static class Resource<T> {
        public enum Status { SUCCESS, ERROR, LOADING }
        
        private final Status status;
        private final T data;
        private final String message;
        
        private Resource(Status status, T data, String message) {
            this.status = status;
            this.data = data;
            this.message = message;
        }
        
        public static <T> Resource<T> success(T data) {
            return new Resource<>(Status.SUCCESS, data, null);
        }
        
        public static <T> Resource<T> error(String msg, T data) {
            return new Resource<>(Status.ERROR, data, msg);
        }
        
        public static <T> Resource<T> loading(T data) {
            return new Resource<>(Status.LOADING, data, null);
        }
        
        public Status getStatus() {
            return status;
        }
        
        public T getData() {
            return data;
        }
        
        public String getMessage() {
            return message;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/data/repository/WarningRepository.java
================
package com.example.btl_iot.data.repository;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.example.btl_iot.data.api.ApiClient;
import com.example.btl_iot.data.api.ApiService;
import com.example.btl_iot.data.model.WarningResponse;
import com.example.btl_iot.data.repository.AuthRepository.Resource;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class WarningRepository {
    private final ApiService apiService;

    public WarningRepository() {
        this.apiService = ApiClient.getApiService();
    }

    public LiveData<Resource<WarningResponse>> getWarning(
            String token, Integer page, Integer limit, String start, String end
    ) {
        MutableLiveData<Resource<WarningResponse>> warningResult = new MutableLiveData<>();
        warningResult.setValue(Resource.loading(null));

        apiService.getWarning(token, page, limit, start, end).enqueue(new Callback<WarningResponse>() {
            @Override
            public void onResponse(Call<WarningResponse> call, Response<WarningResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    warningResult.setValue(Resource.success(response.body()));
                    System.out.println("Số lượng warning nhận được: " + response.body().getData().getTotalElements() + " trong tổng số " + response.body().getData().getTotalPages() + " trang");

                } else {
                    String errorMessage = "Failed to fetch warnings. Error code: " + response.code();
                    warningResult.setValue(Resource.error(errorMessage, null));
                }
            }

            @Override
            public void onFailure(Call<WarningResponse> call, Throwable t) {
                warningResult.setValue(Resource.error("Network error: " + t.getMessage(), null));
            }
        });

        return warningResult;
    }
}

================
File: app/src/main/java/com/example/btl_iot/MainActivity.java
================
package com.example.btl_iot;

import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentTransaction;

import com.example.btl_iot.ui.dashboard.MainDashboardFragment;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Load MainDashboardFragment ngay khi mở app
        if (savedInstanceState == null) {
            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
            transaction.replace(R.id.main, new MainDashboardFragment());
            transaction.commit();
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/MyApplication.java
================
package com.example.btl_iot;

import android.app.Application;
import android.content.Context;

import com.example.btl_iot.data.api.ApiClient;

public class MyApplication extends Application {
    private static Context appContext;

    @Override
    public void onCreate() {
        super.onCreate();
        appContext = getApplicationContext();
        
        // Initialize the ApiClient with the application context
        ApiClient.init(appContext);
    }

    public static Context getAppContext() {
        return appContext;
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/account/AccountFragment.java
================
package com.example.btl_iot.ui.account;

import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.example.btl_iot.R;
import com.example.btl_iot.ui.auth.LoginActivity;
import com.example.btl_iot.viewmodel.AuthViewModel;

public class AccountFragment extends Fragment {

    private AuthViewModel authViewModel;
    private Button btnLogout;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        authViewModel = new ViewModelProvider(requireActivity()).get(AuthViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_account, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        
        btnLogout = view.findViewById(R.id.btn_logout);
        
        btnLogout.setOnClickListener(v -> logout());
    }
    
    private void logout() {
        // Add logout functionality to AuthViewModel
        authViewModel.logout();
        
        // Show success message
        Toast.makeText(requireContext(), "Đăng xuất thành công", Toast.LENGTH_SHORT).show();
        
        // Navigate back to login screen
        Intent intent = new Intent(requireActivity(), LoginActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        requireActivity().finish();
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/auth/LoginActivity.java
================
package com.example.btl_iot.ui.auth;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;

import com.example.btl_iot.R;
import com.example.btl_iot.data.model.LoginResponse;
import com.example.btl_iot.data.repository.AuthRepository;
import com.example.btl_iot.ui.dashboard.MainDashboardActivity;
import com.example.btl_iot.viewmodel.AuthViewModel;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;

public class LoginActivity extends AppCompatActivity {

    private TextInputLayout tilUsername, tilPassword;
    private TextInputEditText etUsername, etPassword;
    private Button btnLogin, btnGoToRegister;
    private ProgressBar progressBar;
    
    private AuthViewModel authViewModel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        // Initialize views
        initViews();
        
        // Initialize ViewModel
        authViewModel = new ViewModelProvider(this).get(AuthViewModel.class);
        
        // Check if already logged in
        if (authViewModel.isLoggedIn()) {
            navigateToMainDashboard();
            return;
        }
        
        // Set up button click listeners
        setupListeners();
    }

    private void initViews() {
        tilUsername = findViewById(R.id.til_username);
        tilPassword = findViewById(R.id.til_password);
        etUsername = findViewById(R.id.et_username);
        etPassword = findViewById(R.id.et_password);
        btnLogin = findViewById(R.id.btn_login);
        btnGoToRegister = findViewById(R.id.btn_go_to_register);
        progressBar = findViewById(R.id.progress_bar);
    }

    private void setupListeners() {
        btnLogin.setOnClickListener(v -> attemptLogin());
        
        btnGoToRegister.setOnClickListener(v -> {
            // Navigate to RegisterActivity
            Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);
            startActivity(intent);
        });
    }

    private void attemptLogin() {
        // Clear previous errors
        tilUsername.setError(null);
        tilPassword.setError(null);

        // Get input values
        String username = etUsername.getText().toString().trim();
        String password = etPassword.getText().toString().trim();

        // Validate input
        boolean isValid = validateInput(username, password);

        if (isValid) {
            // Show progress
            progressBar.setVisibility(View.VISIBLE);
            btnLogin.setEnabled(false);
            
            // Call login API
            authViewModel.login(username, password).observe(this, result -> {
                // Hide progress
                progressBar.setVisibility(View.GONE);
                btnLogin.setEnabled(true);
                
                if (result.getStatus() == AuthRepository.Resource.Status.SUCCESS) {
                    // Login successful
                    LoginResponse response = result.getData();
                    if (response != null && response.getData() != null) {
                        // Save token to SharedPreferences
                        String token = response.getData().getFormattedToken();
                        long expiration = response.getData().getExpiration();
                        authViewModel.saveAuthToken(token, expiration);
                        
                        // Show success message
                        Toast.makeText(LoginActivity.this, 
                                "Đăng nhập thành công", Toast.LENGTH_SHORT).show();
                        
                        // Navigate to main screen
                        navigateToMainDashboard();
                    }
                } else if (result.getStatus() == AuthRepository.Resource.Status.ERROR) {
                    // Show error message
                    Toast.makeText(LoginActivity.this, 
                            result.getMessage(), Toast.LENGTH_LONG).show();
                }
            });
        }
    }
    
    private void navigateToMainDashboard() {
        Intent intent = new Intent(LoginActivity.this, MainDashboardActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        finish();
    }

    private boolean validateInput(String username, String password) {
        boolean isValid = true;

        if (username.isEmpty()) {
            tilUsername.setError("Vui lòng nhập tên đăng nhập");
            isValid = false;
        }

        if (password.isEmpty()) {
            tilPassword.setError("Vui lòng nhập mật khẩu");
            isValid = false;
        } else if (password.length() < 6) {
            tilPassword.setError("Mật khẩu phải có ít nhất 6 ký tự");
            isValid = false;
        }

        return isValid;
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/auth/RegisterActivity.java
================
package com.example.btl_iot.ui.auth;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;

import com.example.btl_iot.R;
import com.example.btl_iot.data.repository.AuthRepository;
import com.example.btl_iot.viewmodel.AuthViewModel;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;

public class RegisterActivity extends AppCompatActivity {

    private TextInputLayout tilUsername, tilPassword, tilConfirmPassword;
    private TextInputEditText etUsername, etPassword, etConfirmPassword;
    private Button btnRegister, btnBackToLogin;
    private ProgressBar progressBar;
    private AuthViewModel authViewModel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        // Initialize ViewModel
        authViewModel = new ViewModelProvider(this).get(AuthViewModel.class);
        
        // Initialize views
        initViews();
        
        // Set up button click listeners
        setupListeners();
    }

    private void initViews() {
        tilUsername = findViewById(R.id.til_username);
        tilPassword = findViewById(R.id.til_password);
        tilConfirmPassword = findViewById(R.id.til_confirm_password);
        etUsername = findViewById(R.id.et_username);
        etPassword = findViewById(R.id.et_password);
        etConfirmPassword = findViewById(R.id.et_confirm_password);
        btnRegister = findViewById(R.id.btn_register);
        btnBackToLogin = findViewById(R.id.btn_back_to_login);
        progressBar = findViewById(R.id.progress_bar);
    }

    private void setupListeners() {
        btnRegister.setOnClickListener(v -> attemptRegister());
        
        btnBackToLogin.setOnClickListener(v -> {
            // Navigate back to LoginActivity
            finish();
        });
    }

    private void attemptRegister() {
        // Clear previous errors
        tilUsername.setError(null);
        tilPassword.setError(null);
        tilConfirmPassword.setError(null);

        // Get input values
        String username = etUsername.getText().toString().trim();
        String password = etPassword.getText().toString().trim();
        String confirmPassword = etConfirmPassword.getText().toString().trim();

        // Validate input
        boolean isValid = validateInput(username, password, confirmPassword);

        if (isValid) {
            // Show progress
            progressBar.setVisibility(View.VISIBLE);
            btnRegister.setEnabled(false);
            
            // Call register API
            authViewModel.register(username, password).observe(this, result -> {
                // Hide progress
                progressBar.setVisibility(View.GONE);
                btnRegister.setEnabled(true);
                
                if (result.getStatus() == AuthRepository.Resource.Status.SUCCESS) {
                    // Registration successful
                    String successMessage = result.getData() != null && result.getData().getMessage() != null 
                            ? result.getData().getMessage() 
                            : "Đăng ký thành công!";
                    
                    // Show success message
                    Toast.makeText(RegisterActivity.this, successMessage, Toast.LENGTH_SHORT).show();
                    
                    // Navigate to login screen
                    Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);
                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
                    finish();
                } else if (result.getStatus() == AuthRepository.Resource.Status.ERROR) {
                    // Show error message
                    Toast.makeText(RegisterActivity.this, result.getMessage(), Toast.LENGTH_LONG).show();
                }
            });
        }
    }

    private boolean validateInput(String username, String password, String confirmPassword) {
        boolean isValid = true;

        if (username.isEmpty()) {
            tilUsername.setError("Vui lòng nhập tên đăng nhập");
            isValid = false;
        } else if (username.length() < 4) {
            tilUsername.setError("Tên đăng nhập phải có ít nhất 4 ký tự");
            isValid = false;
        }

        if (password.isEmpty()) {
            tilPassword.setError("Vui lòng nhập mật khẩu");
            isValid = false;
        } else if (password.length() < 6) {
            tilPassword.setError("Mật khẩu phải có ít nhất 6 ký tự");
            isValid = false;
        }

        if (confirmPassword.isEmpty()) {
            tilConfirmPassword.setError("Vui lòng xác nhận mật khẩu");
            isValid = false;
        } else if (!confirmPassword.equals(password)) {
            tilConfirmPassword.setError("Mật khẩu xác nhận không trùng khớp");
            isValid = false;
        }

        return isValid;
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/auth/SplashActivity.java
================
package com.example.btl_iot.ui.auth;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;

import androidx.appcompat.app.AppCompatActivity;

import com.example.btl_iot.R;

public class SplashActivity extends AppCompatActivity {

    private static final long SPLASH_DELAY = 2000; // 2 seconds

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);

        // Hide action bar if it exists
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }

        // Delay for a few seconds and then move to the next screen
        new Handler(Looper.getMainLooper()).postDelayed(() -> {
            // Start LoginActivity instead of MainActivity
            Intent intent = new Intent(SplashActivity.this, LoginActivity.class);
            startActivity(intent);
            finish(); // Close this activity to prevent going back to splash
        }, SPLASH_DELAY);
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/dashboard/MainDashboardActivity.java
================
package com.example.btl_iot.ui.dashboard;

import android.os.Bundle;
import android.view.MenuItem;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.navigation.NavController;
import androidx.navigation.fragment.NavHostFragment;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;

import com.example.btl_iot.R;
import com.google.android.material.bottomnavigation.BottomNavigationView;

public class MainDashboardActivity extends AppCompatActivity implements BottomNavigationView.OnNavigationItemSelectedListener {

    private NavController navController;
    private BottomNavigationView bottomNavigationView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_dashboard);

        // Setup bottom navigation
        bottomNavigationView = findViewById(R.id.bottom_navigation);
        bottomNavigationView.setOnNavigationItemSelectedListener(this);

        // Khởi tạo NavController từ NavHostFragment (cách an toàn)
        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager()
                .findFragmentById(R.id.nav_host_fragment);
        
        if (navHostFragment != null) {
            navController = navHostFragment.getNavController();
            
            // Kết nối bottom navigation với navController
            // Dùng sự kiện thay đổi điểm đến để cập nhật bottom nav
            navController.addOnDestinationChangedListener((controller, destination, arguments) -> {
                int id = destination.getId();
                
                // Nếu là một trong các tab chính, cập nhật bottom nav tương ứng
                if (id == R.id.navigation_history || 
                    id == R.id.navigation_warnings ||
                    id == R.id.navigation_people ||
                    id == R.id.navigation_account) {
                    
                    // Cập nhật bottom nav nhưng không kích hoạt sự kiện onClick
                    bottomNavigationView.setOnNavigationItemSelectedListener(null);
                    
                    if (id == R.id.navigation_history) {
                        bottomNavigationView.setSelectedItemId(R.id.navigation_history);
                    } else if (id == R.id.navigation_warnings) {
                        bottomNavigationView.setSelectedItemId(R.id.navigation_warnings);
                    } else if (id == R.id.navigation_people) {
                        bottomNavigationView.setSelectedItemId(R.id.navigation_people);
                    } else if (id == R.id.navigation_account) {
                        bottomNavigationView.setSelectedItemId(R.id.navigation_account);
                    }
                    
                    // Gắn lại listener
                    bottomNavigationView.setOnNavigationItemSelectedListener(this);
                }
            });
        }
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int itemId = item.getItemId();
        
        if (navController == null) {
            return false;
        }
        
        if (itemId == R.id.navigation_history) {
            navController.navigate(R.id.navigation_history);
            return true;
        } else if (itemId == R.id.navigation_warnings) {
            navController.navigate(R.id.navigation_warnings);
            return true;
        } else if (itemId == R.id.navigation_people) {
            navController.navigate(R.id.navigation_people);
            return true;
        } else if (itemId == R.id.navigation_account) {
            navController.navigate(R.id.navigation_account);
            return true;
        }
        
        return false;
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/dashboard/MainDashboardFragment.java
================
package com.example.btl_iot.ui.dashboard;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import com.example.btl_iot.R;
import com.example.btl_iot.ui.history.HistoryFragment;
import com.example.btl_iot.ui.warnings.WarningsFragment;
import com.google.android.material.bottomnavigation.BottomNavigationView;

public class MainDashboardFragment extends Fragment {

    private BottomNavigationView bottomNavigationView;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_main_dashboard, container, false);

        bottomNavigationView = view.findViewById(R.id.bottom_navigation);

        bottomNavigationView.setOnItemSelectedListener(item -> {
            int itemId = item.getItemId();
            if (itemId == R.id.navigation_history) {
                loadFragment(new HistoryFragment());
                return true;
            } else if (itemId == R.id.navigation_warnings) {
                loadFragment(new WarningsFragment());
                return true;
            }
            return false;
        });

        // Load default fragment (HistoryFragment)
        loadFragment(new HistoryFragment());

        return view;
    }

    private void loadFragment(Fragment fragment) {
        requireActivity().getSupportFragmentManager().beginTransaction()
                .replace(R.id.nav_host_fragment, fragment)  // Sửa ở đây
                .commit();
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/history/HistoryAdapter.java
================
package com.example.btl_iot.ui.history;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import com.example.btl_iot.R;
import com.example.btl_iot.data.model.HistoryResponse;

import java.util.List;

public class HistoryAdapter extends RecyclerView.Adapter<HistoryAdapter.HistoryViewHolder> {

    private List<HistoryResponse.History> historyList;

    public HistoryAdapter(List<HistoryResponse.History> historyList) {
        this.historyList = historyList;
    }

    public void updateData(List<HistoryResponse.History> newHistoryList) {
        this.historyList = newHistoryList;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public HistoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_history, parent, false);
        return new HistoryViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull HistoryViewHolder holder, int position) {
        HistoryResponse.History history = historyList.get(position);
        holder.title.setText(history.getTimestamp());
        holder.name.setText(history.getPeople() != null ? history.getPeople().getName() : "Unknown");
        holder.historyId.setText("ID: " + history.getHistoryId());
        holder.mode.setText("Mode: " + history.getMode());
    }

    @Override
    public int getItemCount() {
        return historyList == null ? 0 : historyList.size();
    }

    static class HistoryViewHolder extends RecyclerView.ViewHolder {
        TextView title;
        TextView name;
        TextView historyId;
        TextView mode;

        public HistoryViewHolder(@NonNull View itemView) {
            super(itemView);
            title = itemView.findViewById(R.id.history_item_title);
            name = itemView.findViewById(R.id.history_item_name);
            historyId = itemView.findViewById(R.id.history_item_id);
            mode = itemView.findViewById(R.id.history_item_mode);
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/history/HistoryFragment.java
================
package com.example.btl_iot.ui.history;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.example.btl_iot.R;
import com.example.btl_iot.data.model.HistoryResponse;
import com.example.btl_iot.util.Constants;
import com.example.btl_iot.viewmodel.HistoryViewModel;

import java.util.List;

public class HistoryFragment extends Fragment {

    private ProgressBar progressBar;
    private RecyclerView recyclerView;
    private HistoryAdapter historyAdapter;
    private HistoryViewModel historyViewModel;

    @SuppressLint("MissingInflatedId")
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_history, container, false);

        progressBar = view.findViewById(R.id.progress_bar);
        recyclerView = view.findViewById(R.id.recycler_view_history);

        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        historyAdapter = new HistoryAdapter(null); // Adapter ban đầu không có dữ liệu
        recyclerView.setAdapter(historyAdapter);

        historyViewModel = new ViewModelProvider(this).get(HistoryViewModel.class);

        String token = getAuthToken(); // Lấy token từ SharedPreferences
        if (token == null || token.isEmpty()) {
            Toast.makeText(getContext(), "Token not found. Please log in again.", Toast.LENGTH_SHORT).show();
            return view;
        }

        int page = 0;
        int limit = 20;
        String start = "2023-01-01";
        String end = "2025-12-31";

        observeHistoryData(token, page, limit, start, end);

        return view;
    }

    private String getAuthToken() {
        SharedPreferences prefs = requireContext().getSharedPreferences(Constants.PREF_NAME, Context.MODE_PRIVATE);
        String rawToken = prefs.getString(Constants.KEY_AUTH_TOKEN, null);
        if (rawToken != null) {
            return "Bearer " + rawToken;
        } else {
            return null;
        }
    }

    private void observeHistoryData(String token, int page, int limit, String start, String end) {
        progressBar.setVisibility(View.VISIBLE);

        historyViewModel.getHistory(token, page, limit, start, end).observe(getViewLifecycleOwner(), resource -> {
            progressBar.setVisibility(View.GONE);

            if (resource == null) {
                Toast.makeText(getContext(), "No data available", Toast.LENGTH_SHORT).show();
                return;
            }

            switch (resource.getStatus()) {
                case SUCCESS:
                    HistoryResponse historyResponse = resource.getData();
                    if (historyResponse != null && historyResponse.isSuccess() && historyResponse.getData() != null) {
                        List<HistoryResponse.History> histories = historyResponse.getData().getContent();
                        if (histories != null && !histories.isEmpty()) {
                            historyAdapter.updateData(histories); // Cập nhật dữ liệu cho adapter
                        } else {
                            Toast.makeText(getContext(), "No history found", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(getContext(), "Failed to load history", Toast.LENGTH_SHORT).show();
                    }
                    break;

                case ERROR:
                    Toast.makeText(getContext(), resource.getMessage(), Toast.LENGTH_SHORT).show();
                    break;

                case LOADING:
                    progressBar.setVisibility(View.VISIBLE);
                    break;
            }
        });
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/people/AddEditPersonFragment.java
================
package com.example.btl_iot.ui.people;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.Navigation;

import com.bumptech.glide.Glide;
import com.example.btl_iot.R;
import com.example.btl_iot.data.model.Person;
import com.example.btl_iot.data.repository.PeopleRepository;
import com.example.btl_iot.viewmodel.PeopleViewModel;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;

public class AddEditPersonFragment extends Fragment {

    private static final String TAG = "AddEditPersonFragment";
    private static final int REQUEST_STORAGE_PERMISSION = 100;

    private PeopleViewModel viewModel;
    private TextView titleTextView;
    private TextView messageTextView;
    private TextInputLayout nameLayout;
    private TextInputEditText nameEditText;
    private TextInputLayout ageLayout;
    private TextInputEditText ageEditText;
    private Button saveButton;
    private Button backButton;
    private Button submitButton;
    private Button choosePhotoButton;
    private Button takePhotoButton;
    private ImageView imageView;
    private ProgressBar progressBar;
    
    private Uri selectedImageUri = null;
    private Person currentPerson = null;
    private boolean isEditMode = false;
    private boolean hasSelectedNewImage = false;
    
    private final ActivityResultLauncher<Intent> galleryLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
                    Uri imageUri = result.getData().getData();
                    if (imageUri != null) {
                        Log.d(TAG, "Đã chọn ảnh mới từ gallery: " + imageUri);
                        selectedImageUri = imageUri;
                        hasSelectedNewImage = true;
                        loadImage(imageUri);
                    }
                }
            });
            
    private final ActivityResultLauncher<String> requestPermissionLauncher =
            registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
                if (isGranted) {
                    openGallery();
                } else {
                    Toast.makeText(requireContext(), "Cần quyền truy cập bộ nhớ để chọn ảnh", Toast.LENGTH_SHORT).show();
                }
            });

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        viewModel = new ViewModelProvider(requireActivity()).get(PeopleViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                            @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_add_edit_person, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        
        // Khởi tạo các view
        titleTextView = view.findViewById(R.id.txt_title);
        messageTextView = view.findViewById(R.id.txt_message);
        nameLayout = view.findViewById(R.id.layout_name);
        nameEditText = view.findViewById(R.id.input_name);
        ageLayout = view.findViewById(R.id.layout_age);
        ageEditText = view.findViewById(R.id.input_age);
        saveButton = view.findViewById(R.id.btn_save);
        backButton = view.findViewById(R.id.btn_back);
        imageView = view.findViewById(R.id.img_person_avatar);
        choosePhotoButton = view.findViewById(R.id.btn_choose_image);
        takePhotoButton = view.findViewById(R.id.btn_take_photo);
        progressBar = view.findViewById(R.id.progress_bar);
        submitButton = view.findViewById(R.id.btn_submit);
        
        // Kiểm tra xem đang ở chế độ chỉnh sửa hay thêm mới
        checkEditMode();
        
        // Setup giao diện
        setupUI();
        observeViewModel();
    }
    
    private void checkEditMode() {
        Integer selectedId = viewModel.getSelectedPersonId().getValue();
        Person selectedPerson = viewModel.getSelectedPerson().getValue();
        
        if (selectedId != null && selectedId > 0 && selectedPerson != null) {
            isEditMode = true;
            currentPerson = selectedPerson;
            
            // Trường hợp đã có dữ liệu chi tiết từ list
            prepareEditMode(selectedPerson);
        } else if (selectedId != null && selectedId > 0) {
            isEditMode = true;
            
            // Trường hợp chỉ có ID, cần gọi API để lấy chi tiết
            loadPersonDetail(selectedId);
        } else {
            isEditMode = false;
        }
    }
    
    private void loadPersonDetail(int personId) {
        progressBar.setVisibility(View.VISIBLE);
        viewModel.getPersonDetail(personId).observe(getViewLifecycleOwner(), resource -> {
            progressBar.setVisibility(View.GONE);
            
            if (resource.getStatus() == PeopleRepository.Resource.Status.SUCCESS && resource.getData() != null) {
                currentPerson = resource.getData();
                prepareEditMode(currentPerson);
            } else if (resource.getStatus() == PeopleRepository.Resource.Status.ERROR) {
                Toast.makeText(requireContext(), "Lỗi: " + resource.getMessage(), Toast.LENGTH_LONG).show();
                navigateBack();
            }
        });
    }
    
    private void prepareEditMode(Person person) {
        // Fill data vào form
        if (nameEditText != null) nameEditText.setText(person.getName());
        if (ageEditText != null) ageEditText.setText(String.valueOf(person.getAge()));
        
        // Load ảnh và lưu URI
        if (person.getFaceImagePath() != null && !person.getFaceImagePath().isEmpty()) {
            selectedImageUri = Uri.parse(person.getFaceImagePath());
            loadImage(selectedImageUri);
        }
    }
    
    private void setupUI() {
        // Hiển thị tiêu đề
        if (isEditMode) {
            titleTextView.setText("Chỉnh sửa người dùng");
        } else {
            titleTextView.setText("Thêm người dùng mới");
        }
        
        // Ẩn thông báo
        if (messageTextView != null) {
            if (isEditMode) {
                messageTextView.setVisibility(View.VISIBLE);
                messageTextView.setText("Bạn có thể chỉ cập nhật tên và tuổi mà không cần chọn ảnh mới.");
                messageTextView.setTextColor(ContextCompat.getColor(requireContext(), android.R.color.holo_blue_dark));
            } else {
                messageTextView.setVisibility(View.GONE);
            }
        }
        
        // Thiết lập các trường nhập liệu
        if (nameLayout != null) nameLayout.setVisibility(View.VISIBLE);
        if (nameEditText != null) nameEditText.setVisibility(View.VISIBLE);
        if (ageLayout != null) ageLayout.setVisibility(View.VISIBLE);
        if (ageEditText != null) ageEditText.setVisibility(View.VISIBLE);
        
        // Thiết lập nút chọn ảnh
        if (choosePhotoButton != null) {
            choosePhotoButton.setVisibility(View.VISIBLE);
            choosePhotoButton.setOnClickListener(v -> checkAndRequestStoragePermission());
        }
        
        // Ẩn nút chụp ảnh (để đơn giản hóa, chỉ sử dụng gallery)
        if (takePhotoButton != null) {
            takePhotoButton.setVisibility(View.GONE);
        }
        
        // Thiết lập nút submit
        if (submitButton != null) {
            submitButton.setVisibility(View.VISIBLE);
            if (isEditMode) {
                submitButton.setText("Cập nhật người dùng");
            } else {
                submitButton.setText("Thêm người dùng");
            }
            submitButton.setOnClickListener(v -> validateAndSave());
        }
        
        // Thiết lập nút lưu (ẩn đi vì đã có nút submit)
        if (saveButton != null) {
            saveButton.setVisibility(View.GONE);
        }
        
        // Thiết lập nút quay lại
        if (backButton != null) {
            backButton.setVisibility(View.VISIBLE);
            backButton.setText("Quay lại");
            backButton.setOnClickListener(v -> navigateBack());
        }
    }
    
    private void observeViewModel() {
        viewModel.getAddPersonSuccess().observe(getViewLifecycleOwner(), success -> {
            if (success) {
                // Reset flag
                viewModel.setAddPersonSuccess(false);
                // Refresh danh sách và quay lại
                viewModel.refreshPeopleList();
                navigateBack();
            }
        });
        
        viewModel.getUpdatePersonSuccess().observe(getViewLifecycleOwner(), success -> {
            if (success) {
                // Reset flag
                viewModel.setUpdatePersonSuccess(false);
                // Refresh danh sách và quay lại
                viewModel.refreshPeopleList();
                navigateBack();
            }
        });
    }
    
    private void checkAndRequestStoragePermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // Android 13+ uses READ_MEDIA_IMAGES instead of READ_EXTERNAL_STORAGE
            if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_MEDIA_IMAGES)
                    != PackageManager.PERMISSION_GRANTED) {
                requestPermissionLauncher.launch(Manifest.permission.READ_MEDIA_IMAGES);
            } else {
                openGallery();
            }
        } else {
            // For older Android versions
            if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_EXTERNAL_STORAGE)
                    != PackageManager.PERMISSION_GRANTED) {
                requestPermissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE);
            } else {
                openGallery();
            }
        }
    }
    
    private void openGallery() {
        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        galleryLauncher.launch(intent);
    }
    
    private void loadImage(Uri imageUri) {
        Glide.with(requireContext())
                .load(imageUri)
                .placeholder(android.R.drawable.ic_menu_gallery)
                .error(android.R.drawable.ic_menu_camera)
                .centerCrop()
                .into(imageView);
    }
    
    private void validateAndSave() {
        String name = nameEditText.getText() != null ? nameEditText.getText().toString().trim() : "";
        String ageText = ageEditText.getText() != null ? ageEditText.getText().toString().trim() : "";
        
        // Validate name
        if (TextUtils.isEmpty(name)) {
            nameLayout.setError("Vui lòng nhập tên");
            return;
        } else {
            nameLayout.setError(null);
        }
        
        // Validate age
        if (TextUtils.isEmpty(ageText)) {
            ageLayout.setError("Vui lòng nhập tuổi");
            return;
        } else {
            ageLayout.setError(null);
        }
        
        int age;
        try {
            age = Integer.parseInt(ageText);
            if (age <= 0 || age > 120) {
                ageLayout.setError("Tuổi phải từ 1-120");
                return;
            }
        } catch (NumberFormatException e) {
            ageLayout.setError("Tuổi không hợp lệ");
            return;
        }
        
        // Validate image - chỉ bắt buộc khi thêm mới
        if (!isEditMode && selectedImageUri == null) {
            Toast.makeText(requireContext(), "Vui lòng chọn ảnh", Toast.LENGTH_SHORT).show();
            return;
        }
        
        // Show progress
        if (progressBar != null) progressBar.setVisibility(View.VISIBLE);
        submitButton.setEnabled(false);
        
        // Call API - phân biệt giữa thêm mới và cập nhật
        if (isEditMode) {
            updatePerson(name, age);
        } else {
            addPerson(name, age);
        }
    }
    
    private void addPerson(String name, int age) {
        viewModel.addPerson(name, age, selectedImageUri).observe(getViewLifecycleOwner(), result -> {
            // Hide progress
            if (progressBar != null) progressBar.setVisibility(View.GONE);
            submitButton.setEnabled(true);
            
            if (result.getStatus() == PeopleRepository.Resource.Status.SUCCESS) {
                Toast.makeText(requireContext(), "Thêm người dùng thành công", Toast.LENGTH_SHORT).show();
                viewModel.setAddPersonSuccess(true);
            } else if (result.getStatus() == PeopleRepository.Resource.Status.ERROR) {
                Toast.makeText(requireContext(), "Lỗi: " + result.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }
    
    private void updatePerson(String name, int age) {
        Log.d(TAG, "Gọi API cập nhật người dùng, ID: " + currentPerson.getPeopleId() + 
                ", Tên: " + name + ", Tuổi: " + age + 
                ", Đã chọn ảnh mới: " + hasSelectedNewImage);
                
        // Nếu đã chọn ảnh mới, gửi ảnh đó. Nếu không, gửi null để chỉ cập nhật tên và tuổi
        Uri imageToUpload = hasSelectedNewImage ? selectedImageUri : null;
        
        viewModel.updatePerson(currentPerson.getPeopleId(), name, age, imageToUpload).observe(getViewLifecycleOwner(), result -> {
            // Hide progress
            if (progressBar != null) progressBar.setVisibility(View.GONE);
            submitButton.setEnabled(true);
            
            if (result.getStatus() == PeopleRepository.Resource.Status.SUCCESS) {
                Toast.makeText(requireContext(), "Cập nhật người dùng thành công", Toast.LENGTH_SHORT).show();
                Log.d(TAG, "Cập nhật người dùng thành công: " + result.getData().getName());
                viewModel.setUpdatePersonSuccess(true);
            } else if (result.getStatus() == PeopleRepository.Resource.Status.ERROR) {
                String errorMsg = "Lỗi: " + result.getMessage();
                Toast.makeText(requireContext(), errorMsg, Toast.LENGTH_LONG).show();
                Log.e(TAG, errorMsg);
            }
        });
    }

    private void navigateBack() {
        Navigation.findNavController(requireActivity(), R.id.nav_host_fragment)
                .navigateUp();
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/people/PeopleAdapter.java
================
package com.example.btl_iot.ui.people;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.example.btl_iot.R;
import com.example.btl_iot.data.model.Person;

import java.util.ArrayList;
import java.util.List;

public class PeopleAdapter extends RecyclerView.Adapter<PeopleAdapter.PersonViewHolder> {
    private static final String TAG = "PeopleAdapter";
    private final PersonClickListener clickListener;
    private List<Person> personList = new ArrayList<>();

    public interface PersonClickListener {
        void onPersonClick(Person person);
    }

    public PeopleAdapter(PersonClickListener clickListener) {
        this.clickListener = clickListener;
        Log.d(TAG, "PeopleAdapter created");
    }

    @NonNull
    @Override
    public PersonViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        Log.d(TAG, "onCreateViewHolder called");
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_person, parent, false);
        return new PersonViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull PersonViewHolder holder, int position) {
        Person person = personList.get(position);
        Log.d(TAG, "onBindViewHolder position: " + position + ", person: " + person.getName());
        holder.bind(person, clickListener);
    }

    @Override
    public int getItemCount() {
        return personList.size();
    }

    public void submitList(List<Person> list) {
        Log.d(TAG, "submitList called, size: " + (list != null ? list.size() : 0));
        if (list != null) {
            this.personList = new ArrayList<>(list);
            notifyDataSetChanged();
        }
    }

    static class PersonViewHolder extends RecyclerView.ViewHolder {
        private final ImageView avatarImageView;
        private final TextView nameTextView;
        private final TextView ageGenderTextView;

        public PersonViewHolder(@NonNull View itemView) {
            super(itemView);
            avatarImageView = itemView.findViewById(R.id.img_person_avatar);
            nameTextView = itemView.findViewById(R.id.txt_person_name);
            ageGenderTextView = itemView.findViewById(R.id.txt_person_details);
        }

        public void bind(Person person, PersonClickListener listener) {
            nameTextView.setText(person.getName());
            
            // Format age info
            String details = person.getAge() + " years";
            ageGenderTextView.setText(details);
            
            String imagePath = person.getFaceImagePath();
            Context context = itemView.getContext();
            
            if (imagePath != null && !imagePath.isEmpty()) {
                // Load image from URL with Glide
                Glide.with(context)
                        .load(imagePath)
                        .placeholder(android.R.drawable.ic_menu_gallery)
                        .error(android.R.drawable.ic_menu_camera)
                        .centerCrop()
                        .into(avatarImageView);
            } else {
                // Default image
                avatarImageView.setImageResource(android.R.drawable.ic_menu_camera);
            }

            itemView.setOnClickListener(v -> {
                if (listener != null) {
                    listener.onPersonClick(person);
                }
            });
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/people/PeopleManagementFragment.java
================
package com.example.btl_iot.ui.people;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.example.btl_iot.R;
import com.example.btl_iot.data.model.Person;
import com.example.btl_iot.data.repository.PeopleRepository;
import com.example.btl_iot.viewmodel.PeopleViewModel;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.util.List;

public class PeopleManagementFragment extends Fragment implements PeopleAdapter.PersonClickListener {
    private static final String TAG = "PeopleManagementFrag";
    
    private PeopleViewModel viewModel;
    private RecyclerView recyclerView;
    private TextView emptyView;
    private PeopleAdapter adapter;
    private ProgressBar progressBar;
    private SwipeRefreshLayout swipeRefreshLayout;
    private FloatingActionButton fabAddPerson;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Use ApplicationContext to create the ViewModel
        viewModel = new ViewModelProvider(requireActivity(), 
                ViewModelProvider.AndroidViewModelFactory.getInstance(requireActivity().getApplication()))
                .get(PeopleViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_people_management, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        
        recyclerView = view.findViewById(R.id.recycler_people);
        emptyView = view.findViewById(R.id.txt_empty_view);
        progressBar = view.findViewById(R.id.progress_bar);
        swipeRefreshLayout = view.findViewById(R.id.swipe_refresh);
        fabAddPerson = view.findViewById(R.id.fab_add_person);
        
        setupRecyclerView();
        setupSwipeRefresh();
        setupFab();
        observeViewModel();
    }

    private void setupRecyclerView() {
        Log.d(TAG, "Setting up RecyclerView");
        adapter = new PeopleAdapter(this);
        recyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        recyclerView.setAdapter(adapter);
    }

    private void setupSwipeRefresh() {
        swipeRefreshLayout.setOnRefreshListener(() -> {
            viewModel.refreshPeopleList();
        });
    }
    
    private void setupFab() {
        fabAddPerson.setOnClickListener(v -> {
            // Reset người dùng đang chọn
            viewModel.setSelectedPersonId(-1);
            viewModel.setSelectedPerson(null);
            
            NavController navController = Navigation.findNavController(requireActivity(), R.id.nav_host_fragment);
            navController.navigate(R.id.action_navigation_people_to_addEditPerson);
        });
    }

    private void observeViewModel() {
        viewModel.getPeopleList().observe(getViewLifecycleOwner(), resource -> {
            swipeRefreshLayout.setRefreshing(false);
            
            if (resource.getStatus() == PeopleRepository.Resource.Status.LOADING) {
                progressBar.setVisibility(View.VISIBLE);
                recyclerView.setVisibility(View.GONE);
                emptyView.setVisibility(View.GONE);
            } else if (resource.getStatus() == PeopleRepository.Resource.Status.SUCCESS) {
                progressBar.setVisibility(View.GONE);
                
                List<Person> people = resource.getData();
                if (people != null && !people.isEmpty()) {
                    recyclerView.setVisibility(View.VISIBLE);
                    emptyView.setVisibility(View.GONE);
                    adapter.submitList(people);
                    
                    Log.d(TAG, "People list loaded successfully: " + people.size() + " items");
                } else {
                    recyclerView.setVisibility(View.GONE);
                    emptyView.setVisibility(View.VISIBLE);
                    emptyView.setText(R.string.no_people_found);
                    Log.d(TAG, "People list is empty");
                }
            } else if (resource.getStatus() == PeopleRepository.Resource.Status.ERROR) {
                progressBar.setVisibility(View.GONE);
                recyclerView.setVisibility(View.GONE);
                emptyView.setVisibility(View.VISIBLE);
                emptyView.setText(getString(R.string.no_people_found) + "\n" + resource.getMessage());
                
                // Show error toast
                Toast.makeText(requireContext(), "Error: " + resource.getMessage(), Toast.LENGTH_LONG).show();
                Log.e(TAG, "Error loading people: " + resource.getMessage());
            }
        });
    }

    @Override
    public void onPersonClick(Person person) {
        // Lưu thông tin người dùng đã chọn vào ViewModel
        Log.d(TAG, "Person clicked: " + person.getName() + ", ID: " + person.getPeopleId());
        viewModel.setSelectedPersonId(person.getPeopleId());
        viewModel.setSelectedPerson(person);
        
        // Điều hướng đến màn hình chỉnh sửa
        NavController navController = Navigation.findNavController(requireActivity(), R.id.nav_host_fragment);
        navController.navigate(R.id.action_navigation_people_to_addEditPerson);
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/warnings/WarningsAdapter.java
================
package com.example.btl_iot.ui.warnings;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import com.example.btl_iot.R;
import com.example.btl_iot.data.model.WarningResponse;

import java.util.List;

public class WarningsAdapter extends RecyclerView.Adapter<WarningsAdapter.WarningViewHolder> {

    private List<WarningResponse.Warning> warningList;

    // Constructor để nhận vào danh sách cảnh báo
    public WarningsAdapter(List<WarningResponse.Warning> warningList) {
        this.warningList = warningList;
    }

    // Phương thức để cập nhật dữ liệu mới
    public void updateData(List<WarningResponse.Warning> newWarningList) {
        this.warningList = newWarningList;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public WarningViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        // Inflate layout item_warning để tạo ViewHolder
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_warning, parent, false);
        return new WarningViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull WarningViewHolder holder, int position) {
        // Lấy cảnh báo tại vị trí hiện tại trong danh sách
        WarningResponse.Warning warning = warningList.get(position);

        // Gán dữ liệu vào các TextView trong item
        holder.message.setText("Infor: " + warning.getInfo());
        holder.timestamp.setText(warning.getTimestamp());
        holder.id.setText("ID: " + warning.getId());
    }

    @Override
    public int getItemCount() {
        return warningList == null ? 0 : warningList.size();
    }

    // ViewHolder để quản lý các thành phần trong item_warning
    static class WarningViewHolder extends RecyclerView.ViewHolder {
        TextView message;
        TextView timestamp;
        TextView id;

        public WarningViewHolder(@NonNull View itemView) {
            super(itemView);
            // Ánh xạ các TextView từ layout item_warning
            message = itemView.findViewById(R.id.warning_item_message);
            timestamp = itemView.findViewById(R.id.warning_item_timestamp);
            id = itemView.findViewById(R.id.warning_item_id);
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/ui/warnings/WarningsFragment.java
================
package com.example.btl_iot.ui.warnings;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.example.btl_iot.R;
import com.example.btl_iot.data.model.WarningResponse;
import com.example.btl_iot.util.Constants;
import com.example.btl_iot.viewmodel.WarningViewModel;

import java.util.List;

public class WarningsFragment extends Fragment {

    private ProgressBar progressBar;
    private RecyclerView recyclerView;
    private WarningsAdapter warningAdapter;
    private WarningViewModel warningViewModel;

    @SuppressLint("MissingInflatedId")
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_warning, container, false);

        // Ensure the IDs match those in fragment_warning.xml
        progressBar = view.findViewById(R.id.progress_bar_warning); // Correct ID
        recyclerView = view.findViewById(R.id.recycler_view_warning);

        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        warningAdapter = new WarningsAdapter(null); // Adapter initially has no data
        recyclerView.setAdapter(warningAdapter);

        warningViewModel = new ViewModelProvider(this).get(WarningViewModel.class);

        String token = getAuthToken(); // Replace with actual token
        int page = 0;
        int limit = 20;
        String start = "2023-01-01";
        String end = "2025-12-31";

        observeWarningData(token, page, limit, start, end);

        return view;
    }

    private String getAuthToken() {
        SharedPreferences prefs = requireContext().getSharedPreferences(Constants.PREF_NAME, Context.MODE_PRIVATE);
        String rawToken = prefs.getString(Constants.KEY_AUTH_TOKEN, null);
        if (rawToken != null) {
            return "Bearer " + rawToken;
        } else {
            return null;
        }
    }

    private void observeWarningData(String token, int page, int limit, String start, String end) {
        progressBar.setVisibility(View.VISIBLE);

        warningViewModel.getWarnings(token, page, limit, start, end).observe(getViewLifecycleOwner(), resource -> {
            progressBar.setVisibility(View.GONE);

            if (resource == null) {
                Toast.makeText(getContext(), "No data available", Toast.LENGTH_SHORT).show();
                return;
            }

            switch (resource.getStatus()) {
                case SUCCESS:
                    WarningResponse warningResponse = resource.getData();
                    if (warningResponse != null && warningResponse.isSuccess() && warningResponse.getData() != null) {
                        List<WarningResponse.Warning> warnings = warningResponse.getData().getContent();
                        if (warnings != null && !warnings.isEmpty()) {
                            warningAdapter.updateData(warnings); // Cập nhật dữ liệu cho adapter
                        } else {
                            Toast.makeText(getContext(), "No warnings found", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(getContext(), "Failed to load warnings", Toast.LENGTH_SHORT).show();
                    }
                    break;

                case ERROR:
                    Toast.makeText(getContext(), resource.getMessage(), Toast.LENGTH_SHORT).show();
                    break;

                case LOADING:
                    progressBar.setVisibility(View.VISIBLE);
                    break;
            }
        });
    }
}

================
File: app/src/main/java/com/example/btl_iot/util/Constants.java
================
package com.example.btl_iot.util;

public class Constants {
    // API Base URL
    public static final String BASE_URL = "http://209.97.160.79/";
    
    // SharedPreferences
    public static final String PREF_NAME = "btl_iot_prefs";
    public static final String KEY_AUTH_TOKEN = "auth_token";
    public static final String KEY_TOKEN_EXPIRATION = "token_expiration";
}

================
File: app/src/main/java/com/example/btl_iot/util/FileUtils.java
================
package com.example.btl_iot.util;

import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class FileUtils {
    private static final String TAG = "FileUtils";

    /**
     * Chuyển đổi Uri thành File
     * Luôn copy file vào bộ nhớ cache của ứng dụng để tránh lỗi permission
     */
    public static File getFileFromUri(Context context, Uri uri) {
        if (uri == null) return null;
        
        // Luôn copy file vào bộ nhớ cache của ứng dụng để tránh lỗi permission
        try {
            String fileName = "image_" + System.currentTimeMillis() + ".jpg";
            File outputFile = new File(context.getCacheDir(), fileName);
            
            try (InputStream inputStream = context.getContentResolver().openInputStream(uri);
                 OutputStream outputStream = new FileOutputStream(outputFile)) {
                
                if (inputStream == null) {
                    Log.e(TAG, "Failed to open input stream from uri: " + uri);
                    return null;
                }
                
                byte[] buffer = new byte[4 * 1024]; // 4k buffer
                int read;
                while ((read = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, read);
                }
                outputStream.flush();
                Log.d(TAG, "Successfully copied file to cache: " + outputFile.getAbsolutePath());
                return outputFile;
            }
        } catch (IOException e) {
            Log.e(TAG, "Error copying file from uri: " + uri, e);
            return null;
        }
    }
}

================
File: app/src/main/java/com/example/btl_iot/util/ImageUtils.java
================
package com.example.btl_iot.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class ImageUtils {
    private static final String TAG = "ImageUtils";
    private static final String IMAGE_DIR = "person_images";

    public static String saveImageToInternalStorage(Context context, Uri imageUri) {
        try {
            // Create directory if it doesn't exist
            File directory = new File(context.getFilesDir(), IMAGE_DIR);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            // Create unique filename
            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
            String fileName = "PERSON_" + timeStamp + ".jpg";
            File outputFile = new File(directory, fileName);

            // Copy and compress the image
            InputStream inputStream = context.getContentResolver().openInputStream(imageUri);
            if (inputStream != null) {
                Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
                FileOutputStream fos = new FileOutputStream(outputFile);
                bitmap.compress(Bitmap.CompressFormat.JPEG, 80, fos);
                fos.close();
                inputStream.close();
                return outputFile.getAbsolutePath();
            }
        } catch (IOException e) {
            Log.e(TAG, "Error saving image: " + e.getMessage());
        }
        return null;
    }

    public static String saveImageToInternalStorage(Context context, Bitmap bitmap) {
        try {
            // Create directory if it doesn't exist
            File directory = new File(context.getFilesDir(), IMAGE_DIR);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            // Create unique filename
            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
            String fileName = "PERSON_" + timeStamp + ".jpg";
            File outputFile = new File(directory, fileName);

            // Compress and save the image
            FileOutputStream fos = new FileOutputStream(outputFile);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 80, fos);
            fos.close();
            return outputFile.getAbsolutePath();
        } catch (IOException e) {
            Log.e(TAG, "Error saving image: " + e.getMessage());
        }
        return null;
    }

    public static void deleteImageFromStorage(Context context, String imagePath) {
        if (imagePath != null && !imagePath.isEmpty()) {
            try {
                File file = new File(imagePath);
                if (file.exists()) {
                    boolean deleted = file.delete();
                    if (!deleted) {
                        Log.e(TAG, "Failed to delete image: " + imagePath);
                    }
                }
            } catch (Exception e) {
                Log.e(TAG, "Error deleting image: " + e.getMessage());
            }
        }
    }

    public static Bitmap loadImageFromStorage(String imagePath) {
        try {
            File file = new File(imagePath);
            if (file.exists()) {
                return BitmapFactory.decodeFile(file.getAbsolutePath());
            }
        } catch (Exception e) {
            Log.e(TAG, "Error loading image: " + e.getMessage());
        }
        return null;
    }
}

================
File: app/src/main/java/com/example/btl_iot/util/SharedPrefsUtils.java
================
package com.example.btl_iot.util;

import android.content.Context;
import android.content.SharedPreferences;

public class SharedPrefsUtils {
    
    private static SharedPreferences getSharedPreferences(Context context) {
        return context.getSharedPreferences(Constants.PREF_NAME, Context.MODE_PRIVATE);
    }
    
    public static void saveAuthToken(Context context, String token, long expiration) {
        SharedPreferences.Editor editor = getSharedPreferences(context).edit();
        editor.putString(Constants.KEY_AUTH_TOKEN, token);
        editor.putLong(Constants.KEY_TOKEN_EXPIRATION, expiration);
        editor.apply();
    }
    
    public static String getAuthToken(Context context) {
        return getSharedPreferences(context).getString(Constants.KEY_AUTH_TOKEN, null);
    }
    
    public static long getTokenExpiration(Context context) {
        return getSharedPreferences(context).getLong(Constants.KEY_TOKEN_EXPIRATION, 0);
    }
    
    public static void clearAuthToken(Context context) {
        SharedPreferences.Editor editor = getSharedPreferences(context).edit();
        editor.remove(Constants.KEY_AUTH_TOKEN);
        editor.remove(Constants.KEY_TOKEN_EXPIRATION);
        editor.apply();
    }
    
    public static boolean isLoggedIn(Context context) {
        String token = getAuthToken(context);
        long expiration = getTokenExpiration(context);
        long currentTime = System.currentTimeMillis();
        
        return token != null && expiration > currentTime;
    }
}

================
File: app/src/main/java/com/example/btl_iot/viewmodel/AuthViewModel.java
================
package com.example.btl_iot.viewmodel;

import android.app.Application;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;

import com.example.btl_iot.data.model.LoginResponse;
import com.example.btl_iot.data.model.RegisterResponse;
import com.example.btl_iot.data.repository.AuthRepository;
import com.example.btl_iot.util.SharedPrefsUtils;

public class AuthViewModel extends AndroidViewModel {
    
    private AuthRepository authRepository;

    public AuthViewModel(@NonNull Application application) {
        super(application);
        authRepository = new AuthRepository();
    }
    
    public LiveData<AuthRepository.Resource<LoginResponse>> login(String username, String password) {
        return authRepository.login(username, password);
    }
    
    public LiveData<AuthRepository.Resource<RegisterResponse>> register(String username, String password) {
        return authRepository.register(username, password);
    }
    
    public void saveAuthToken(String token, long expiration) {
        SharedPrefsUtils.saveAuthToken(getApplication(), token, expiration);
    }
    
    public boolean isLoggedIn() {
        return SharedPrefsUtils.isLoggedIn(getApplication());
    }
    
    public void logout() {
        SharedPrefsUtils.clearAuthToken(getApplication());
    }
}

================
File: app/src/main/java/com/example/btl_iot/viewmodel/HistoryViewModel.java
================
package com.example.btl_iot.viewmodel;

import android.app.Application;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;

import com.example.btl_iot.data.model.HistoryResponse;
import com.example.btl_iot.data.repository.AuthRepository;
import com.example.btl_iot.data.repository.HistoryRepository;

public class HistoryViewModel extends AndroidViewModel {
    private HistoryRepository historyRepository;

    public HistoryViewModel(@NonNull Application application) {
        super(application);
        historyRepository = new HistoryRepository();
    }

    // 5 tham số: token, page, limit, start, end
    public LiveData<AuthRepository.Resource<HistoryResponse>> getHistory(
            String token, Integer page, Integer limit, String start, String end
    ) {
        return historyRepository.getHistory(token, page, limit, start, end);
    }
}

================
File: app/src/main/java/com/example/btl_iot/viewmodel/PeopleViewModel.java
================
package com.example.btl_iot.viewmodel;

import android.app.Application;
import android.net.Uri;

import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.example.btl_iot.data.model.Person;
import com.example.btl_iot.data.repository.PeopleRepository;

import java.util.List;

public class PeopleViewModel extends AndroidViewModel {
    private final PeopleRepository repository;
    private final MutableLiveData<String> toastMessage = new MutableLiveData<>();
    private final MutableLiveData<Boolean> isLoading = new MutableLiveData<>(false);
    private final MutableLiveData<Boolean> addPersonSuccess = new MutableLiveData<>(false);
    private final MutableLiveData<Boolean> updatePersonSuccess = new MutableLiveData<>(false);
    private final MutableLiveData<Integer> selectedPersonId = new MutableLiveData<>(-1);
    private final MutableLiveData<Person> selectedPerson = new MutableLiveData<>();

    public PeopleViewModel(Application application) {
        super(application);
        repository = new PeopleRepository();
    }

    public LiveData<PeopleRepository.Resource<List<Person>>> getPeopleList() {
        return repository.getPeopleList();
    }
    
    public LiveData<PeopleRepository.Resource<Person>> getPersonDetail(int peopleId) {
        return repository.getPersonDetail(peopleId);
    }
    
    public LiveData<PeopleRepository.Resource<Person>> addPerson(String name, int age, Uri imageUri) {
        return repository.addPerson(name, age, imageUri, getApplication());
    }
    
    public LiveData<PeopleRepository.Resource<Person>> updatePerson(int peopleId, String name, int age, Uri imageUri) {
        return repository.updatePerson(peopleId, name, age, imageUri, getApplication());
    }

    public LiveData<String> getToastMessage() {
        return toastMessage;
    }

    public LiveData<Boolean> getIsLoading() {
        return isLoading;
    }
    
    public LiveData<Boolean> getAddPersonSuccess() {
        return addPersonSuccess;
    }
    
    public void setAddPersonSuccess(boolean success) {
        addPersonSuccess.setValue(success);
    }
    
    public LiveData<Boolean> getUpdatePersonSuccess() {
        return updatePersonSuccess;
    }
    
    public void setUpdatePersonSuccess(boolean success) {
        updatePersonSuccess.setValue(success);
    }
    
    public LiveData<Integer> getSelectedPersonId() {
        return selectedPersonId;
    }
    
    public void setSelectedPersonId(int id) {
        selectedPersonId.setValue(id);
    }
    
    public LiveData<Person> getSelectedPerson() {
        return selectedPerson;
    }
    
    public void setSelectedPerson(Person person) {
        selectedPerson.setValue(person);
    }

    public void setToastMessage(String message) {
        toastMessage.setValue(message);
    }

    public void refreshPeopleList() {
        // This will trigger the API call again
        repository.getPeopleList();
    }
}

================
File: app/src/main/java/com/example/btl_iot/viewmodel/WarningViewModel.java
================
package com.example.btl_iot.viewmodel;

import android.app.Application;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;

import com.example.btl_iot.data.model.WarningResponse;
import com.example.btl_iot.data.repository.AuthRepository;
import com.example.btl_iot.data.repository.WarningRepository;

public class WarningViewModel extends AndroidViewModel {
    private WarningRepository warningRepository;

    public WarningViewModel(@NonNull Application application) {
        super(application);
        warningRepository = new WarningRepository(); // Khởi tạo WarningRepository
    }

    // 5 tham số: token, page, limit, start, end
    public LiveData<AuthRepository.Resource<WarningResponse>> getWarnings(
            String token, Integer page, Integer limit, String start, String end
    ) {
        return warningRepository.getWarning(token, page, limit, start, end);
    }
}

================
File: app/src/main/java/com/example/btl_iot/viewmodel/WarningViewModelFactory.java
================
//package com.example.btl_iot.viewmodel;
//
//import androidx.annotation.NonNull;
//import androidx.lifecycle.ViewModel;
//import androidx.lifecycle.ViewModelProvider;
//
//import com.example.btl_iot.data.repository.WarningRepository;
//
//public class WarningViewModelFactory implements ViewModelProvider.Factory {
//    private final WarningRepository warningRepository;
//
//    public WarningViewModelFactory(WarningRepository warningRepository) {
//        this.warningRepository = warningRepository;
//    }
//
//    @NonNull
//    @Override
//    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
//        if (modelClass.isAssignableFrom(WarningViewModel.class)) {
//            return (T) new WarningViewModel(warningRepository);
//        }
//        throw new IllegalArgumentException("Unknown ViewModel class");
//    }
//}

================
File: app/src/main/res/drawable/ic_history.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L6,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z"/>
    
</vector>

================
File: app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: app/src/main/res/drawable/ic_warning.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M1,21h22L12,2 1,21zM13,18h-2v-2h2v2zM13,14h-2v-4h2v4z"/>
    
</vector>

================
File: app/src/main/res/layout/activity_login.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="24dp"
    tools:context=".ui.auth.LoginActivity">

    <ImageView
        android:id="@+id/iv_logo"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:src="@mipmap/ic_launcher"
        android:layout_marginTop="48dp"
        android:contentDescription="@string/app_name"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:id="@+id/tv_login_title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="Đăng nhập"
        android:textSize="24sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/iv_logo" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/til_username"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="48dp"
        android:hint="Username"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/tv_login_title">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/et_username"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="text"
            android:maxLines="1" />

    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/til_password"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:hint="Password"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        app:passwordToggleEnabled="true"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/til_username">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/et_password"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textPassword"
            android:maxLines="1" />

    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/btn_login"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        android:text="Đăng nhập"
        android:padding="12dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/til_password" />

    <TextView
        android:id="@+id/tv_register_prompt"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="Bạn chưa có tài khoản?"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/btn_login" />

    <Button
        android:id="@+id/btn_go_to_register"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:text="Đăng ký"
        android:padding="12dp"
        style="@style/Widget.MaterialComponents.Button.OutlinedButton"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/tv_register_prompt" />

    <ProgressBar
        android:id="@+id/progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/activity_main_dashboard.xml
================
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:defaultNavHost="true"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        app:navGraph="@navigation/nav_graph" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        app:menu="@menu/bottom_nav_menu" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

================
File: app/src/main/res/layout/activity_main.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/activity_register.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="24dp"
    tools:context=".ui.auth.RegisterActivity">

    <ImageView
        android:id="@+id/iv_logo"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:src="@mipmap/ic_launcher"
        android:layout_marginTop="48dp"
        android:contentDescription="@string/app_name"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:id="@+id/tv_register_title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="Đăng ký"
        android:textSize="24sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/iv_logo" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/til_username"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="40dp"
        android:hint="Username"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/tv_register_title">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/et_username"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="text"
            android:maxLines="1" />

    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/til_password"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:hint="Password"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        app:passwordToggleEnabled="true"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/til_username">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/et_password"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textPassword"
            android:maxLines="1" />

    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/til_confirm_password"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:hint="Confirm Password"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        app:passwordToggleEnabled="true"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/til_password">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/et_confirm_password"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textPassword"
            android:maxLines="1" />

    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/btn_register"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        android:text="Đăng ký"
        android:padding="12dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/til_confirm_password" />

    <Button
        android:id="@+id/btn_back_to_login"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:text="Trở lại đăng nhập"
        android:padding="12dp"
        style="@style/Widget.MaterialComponents.Button.OutlinedButton"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/btn_register" />

    <ProgressBar
        android:id="@+id/progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/activity_splash.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/white"
    tools:context=".ui.auth.SplashActivity">

    <ImageView
        android:id="@+id/iv_logo"
        android:layout_width="150dp"
        android:layout_height="150dp"
        android:src="@mipmap/ic_launcher"
        android:contentDescription="@string/app_name"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.4" />

    <TextView
        android:id="@+id/tv_app_name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="@string/app_name"
        android:textSize="24sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/iv_logo" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_account.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <TextView
        android:id="@+id/tv_account_title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/account"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent" />

    <Button
        android:id="@+id/btn_logout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/logout"
        android:layout_marginTop="24dp"
        app:layout_constraintTop_toBottomOf="@id/tv_account_title" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_add_edit_person.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="16dp">

        <TextView
            android:id="@+id/txt_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="24sp"
            android:textStyle="bold"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            tools:text="Add Person" />

        <TextView
            android:id="@+id/txt_message"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textColor="#F44336"
            android:textStyle="italic"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/txt_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="API chỉ hỗ trợ xem dữ liệu" />

        <ImageView
            android:id="@+id/img_person_avatar"
            android:layout_width="150dp"
            android:layout_height="150dp"
            android:layout_marginTop="24dp"
            android:contentDescription="Ảnh đại diện người dùng"
            android:scaleType="centerCrop"
            android:background="#EEEEEE"
            app:layout_constraintTop_toBottomOf="@id/txt_message"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:src="@android:drawable/ic_menu_camera" />

        <LinearLayout
            android:id="@+id/layout_photo_buttons"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:orientation="horizontal"
            android:gravity="center"
            app:layout_constraintTop_toBottomOf="@id/img_person_avatar">

            <Button
                android:id="@+id/btn_choose_image"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginEnd="8dp"
                android:layout_weight="1"
                android:text="Chọn ảnh" />

            <Button
                android:id="@+id/btn_take_photo"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:layout_weight="1"
                android:text="Chụp ảnh"
                android:visibility="gone" />
        </LinearLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/layout_name"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:hint="Tên"
            app:layout_constraintTop_toBottomOf="@id/layout_photo_buttons">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/input_name"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPersonName" />
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/layout_age"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:hint="Tuổi"
            app:layout_constraintTop_toBottomOf="@id/layout_name">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/input_age"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="number" />
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/btn_submit"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:text="Thêm người dùng"
            android:drawableStart="@android:drawable/ic_menu_add"
            android:drawablePadding="8dp"
            android:paddingStart="16dp"
            android:paddingEnd="16dp"
            android:backgroundTint="#4CAF50"
            app:layout_constraintTop_toBottomOf="@id/layout_age"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <LinearLayout
            android:id="@+id/layout_action_buttons"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:orientation="horizontal"
            app:layout_constraintTop_toBottomOf="@id/btn_submit"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintVertical_bias="1.0">

            <Button
                android:id="@+id/btn_back"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginEnd="8dp"
                android:layout_weight="1"
                android:text="Quay lại"
                android:backgroundTint="#9E9E9E" />

            <Button
                android:id="@+id/btn_save"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:layout_weight="1"
                android:text="Lưu" />
        </LinearLayout>

        <Button
            android:id="@+id/btn_delete"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Xóa"
            android:backgroundTint="#F44336"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/layout_age"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <ProgressBar
            android:id="@+id/progress_bar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.core.widget.NestedScrollView>

================
File: app/src/main/res/layout/fragment_history.xml
================
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="8dp">

    <ProgressBar
        android:id="@+id/progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:visibility="gone" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recycler_view_history"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="8dp" />
</LinearLayout>

================
File: app/src/main/res/layout/fragment_main_dashboard.xml
================
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <FrameLayout
        android:id="@+id/fragment_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        app:menu="@menu/bottom_nav_menu" />
</LinearLayout>

================
File: app/src/main/res/layout/fragment_people_management.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
        android:id="@+id/swipe_refresh"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@+id/buttonsLayout">

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recycler_people"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            tools:listitem="@layout/item_person" />
    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>

    <ProgressBar
        android:id="@+id/progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <LinearLayout
        android:id="@+id/buttonsLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="8dp"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent">

        <Button
            android:id="@+id/btnAddSampleData"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:layout_marginEnd="4dp"
            android:text="@string/btn_add_sample_data"
            android:visibility="gone" />

        <Button
            android:id="@+id/btnClearData"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:layout_marginStart="4dp"
            android:text="@string/btn_clear_data"
            android:visibility="gone" />
    </LinearLayout>

    <TextView
        android:id="@+id/txt_empty_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/no_people_found"
        android:textSize="18sp"
        android:visibility="gone"
        android:gravity="center"
        android:padding="16dp"
        app:layout_constraintBottom_toBottomOf="@id/swipe_refresh"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fab_add_person"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="16dp"
        android:layout_marginBottom="88dp"
        android:contentDescription="Thêm người dùng mới"
        android:src="@android:drawable/ic_input_add"
        android:visibility="visible"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_warning.xml
================
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="8dp">

    <ProgressBar
        android:id="@+id/progress_bar_warning"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:visibility="gone" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recycler_view_warning"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="8dp" />
</LinearLayout>

================
File: app/src/main/res/layout/item_history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="8dp">

        <ImageView
            android:id="@+id/history_item_icon"
            android:layout_width="60dp"
            android:layout_height="60dp"
            android:scaleType="centerCrop"
            android:src="@drawable/ic_history"
            android:contentDescription="History Icon"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toStartOf="@id/history_item_title" />

        <TextView
            android:id="@+id/history_item_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:textSize="18sp"
            android:textStyle="bold"
            app:layout_constraintStart_toEndOf="@id/history_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="@id/history_item_icon"
            app:layout_constraintBottom_toTopOf="@id/history_item_name"
            tools:text="Timestamp" />

        <TextView
            android:id="@+id/history_item_name"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="4dp"
            android:textSize="14sp"
            android:textColor="#757575"
            app:layout_constraintStart_toEndOf="@id/history_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/history_item_title"
            app:layout_constraintBottom_toTopOf="@id/history_item_id"
            tools:text="Name" />

        <TextView
            android:id="@+id/history_item_id"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="4dp"
            android:textSize="14sp"
            android:textColor="#757575"
            app:layout_constraintStart_toEndOf="@id/history_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/history_item_name"
            app:layout_constraintBottom_toTopOf="@id/history_item_mode"
            tools:text="History ID" />

        <TextView
            android:id="@+id/history_item_mode"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="4dp"
            android:textSize="14sp"
            android:textColor="#757575"
            app:layout_constraintStart_toEndOf="@id/history_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/history_item_id"
            app:layout_constraintBottom_toBottomOf="@id/history_item_icon"
            tools:text="Mode" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.cardview.widget.CardView>

================
File: app/src/main/res/layout/item_person.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="8dp">

        <ImageView
            android:id="@+id/img_person_avatar"
            android:layout_width="60dp"
            android:layout_height="60dp"
            android:scaleType="centerCrop"
            android:contentDescription="Person photo"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:src="@android:drawable/ic_menu_camera" />

        <TextView
            android:id="@+id/txt_person_name"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:textSize="18sp"
            android:textStyle="bold"
            app:layout_constraintStart_toEndOf="@id/img_person_avatar"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="@id/img_person_avatar"
            app:layout_constraintBottom_toTopOf="@id/txt_person_details"
            app:layout_constraintVertical_chainStyle="packed"
            tools:text="Person Name" />
            
        <TextView
            android:id="@+id/txt_person_details"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="4dp"
            android:textSize="14sp"
            android:textColor="#757575"
            app:layout_constraintStart_toEndOf="@id/img_person_avatar"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/txt_person_name"
            app:layout_constraintBottom_toBottomOf="@id/img_person_avatar"
            tools:text="30 years, Male" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.cardview.widget.CardView>

================
File: app/src/main/res/layout/item_warning.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="8dp">

        <!-- Icon cảnh báo -->
        <ImageView
            android:id="@+id/warning_item_icon"
            android:layout_width="60dp"
            android:layout_height="60dp"
            android:scaleType="centerCrop"
            android:src="@drawable/ic_warning"
            android:contentDescription="Warning Icon"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toStartOf="@id/warning_item_message" />

        <!-- Tin nhắn cảnh báo -->
        <TextView
            android:id="@+id/warning_item_message"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:textSize="18sp"
            android:textStyle="normal"
            app:layout_constraintStart_toEndOf="@id/warning_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="@id/warning_item_icon"
            app:layout_constraintBottom_toTopOf="@id/warning_item_id"
            tools:text="Warning Message" />

        <!-- ID cảnh báo -->
        <TextView
            android:id="@+id/warning_item_id"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="4dp"
            android:textSize="14sp"
            android:textColor="#757575"
            app:layout_constraintStart_toEndOf="@id/warning_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/warning_item_message"
            app:layout_constraintBottom_toTopOf="@id/warning_item_timestamp"
            tools:text="ID: 123" />

        <!-- Thời gian cảnh báo -->
        <TextView
            android:id="@+id/warning_item_timestamp"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="4dp"
            android:textSize="14sp"
            android:textColor="#757575"
            app:layout_constraintStart_toEndOf="@id/warning_item_icon"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/warning_item_id"
            app:layout_constraintBottom_toBottomOf="@id/warning_item_icon"
            tools:text="Timestamp" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.cardview.widget.CardView>

================
File: app/src/main/res/menu/bottom_nav_menu.xml
================
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/navigation_history"
        android:icon="@drawable/ic_history"
        android:title="History" />
    <item
        android:id="@+id/navigation_warnings"
        android:icon="@drawable/ic_warning"
        android:title="@string/warnings" />
    <item
        android:id="@+id/navigation_people"
        android:icon="@android:drawable/ic_menu_myplaces"
        android:title="People" />
    <item
        android:id="@+id/navigation_account"
        android:icon="@android:drawable/ic_menu_manage"
        android:title="@string/account" />
</menu>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/navigation/nav_graph.xml
================
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/navigation_history">

    <!-- History Fragment -->
    <fragment
        android:id="@+id/navigation_history"
        android:name="com.example.btl_iot.ui.history.HistoryFragment"
        android:label="History"
        tools:layout="@layout/fragment_history" />

    <!-- Warnings Fragment -->
    <fragment
        android:id="@+id/navigation_warnings"
        android:name="com.example.btl_iot.ui.warnings.WarningsFragment"
        android:label="Warnings"
        tools:layout="@layout/fragment_warnings" />
        
    <!-- People Management Fragment -->
    <fragment
        android:id="@+id/navigation_people"
        android:name="com.example.btl_iot.ui.people.PeopleManagementFragment"
        android:label="People Management"
        tools:layout="@layout/fragment_people_management">
        <action
            android:id="@+id/action_navigation_people_to_addEditPerson"
            app:destination="@id/addEditPersonFragment" />
    </fragment>

    <!-- Add/Edit Person Fragment -->
    <fragment
        android:id="@+id/addEditPersonFragment"
        android:name="com.example.btl_iot.ui.people.AddEditPersonFragment"
        android:label="Add/Edit Person"
        tools:layout="@layout/fragment_add_edit_person">
        <argument
            android:name="personId"
            app:argType="integer"
            android:defaultValue="-1" />
    </fragment>
    
    <!-- Account Fragment -->
    <fragment
        android:id="@+id/navigation_account"
        android:name="com.example.btl_iot.ui.account.AccountFragment"
        android:label="Account"
        tools:layout="@layout/fragment_account" />
</navigation>

================
File: app/src/main/res/values-night/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.Btl_iot" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

================
File: app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================
File: app/src/main/res/values/strings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">btl_iot</string>
    <string name="warnings">Warnings</string>
    <string name="history">History</string>
    <string name="btn_add_sample_data">Add Sample Data</string>
    <string name="btn_clear_data">Clear Data</string>
    <string name="no_people_found">No people found. Click + to add someone.</string>
    <string name="confirm_clear_data">Are you sure you want to delete all people? This action cannot be undone.</string>
    <string name="clear_all_data">Clear All Data</string>
    <string name="yes">Yes</string>
    <string name="no">No</string>
    <string name="sample_data_added">Sample data added</string>
    <string name="all_data_cleared">All data cleared</string>
    <string name="no_data_to_clear">No data to clear</string>
    <string name="account">Tài khoản</string>
    <string name="logout">Đăng xuất</string>
</resources>

================
File: app/src/main/res/values/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.Btl_iot" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.Btl_iot" parent="Base.Theme.Btl_iot" />

    <!-- Splash Screen Theme -->
    <style name="Theme.Btl_iot.NoActionBar" parent="Theme.Btl_iot">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
        <item name="android:windowFullscreen">true</item>
    </style>
</resources>

================
File: app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: app/src/main/res/xml/file_paths.xml
================
<?xml version="1.0" encoding="utf-8"?>
<paths>
    <external-files-path
        name="camera_images"
        path="/" />
    <files-path
        name="internal_images"
        path="person_images/" />
</paths>

================
File: app/src/test/java/com/example/btl_iot/ExampleUnitTest.java
================
package com.example.btl_iot;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}

================
File: build.gradle.kts
================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
}

================
File: gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

# Suppress warnings for unsupported compileSdk
android.suppressUnsupportedCompileSdk=35
# Suppress source/target deprecation warnings
android.javaCompile.suppressSourceTargetDeprecationWarning=true
# Disable lint errors from stopping the build
android.lint.abortOnError=false

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.5.2"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
appcompat = "1.7.0"
material = "1.12.0"
activity = "1.10.1"
constraintlayout = "2.2.1"
recyclerview = "1.4.0"

[libraries]
junit = { group = "junit", name = "junit", version.ref = "junit" }
ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
recyclerview = { group = "androidx.recyclerview", name = "recyclerview", version.ref = "recyclerview" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }

================
File: gradle/wrapper/gradle-wrapper.properties
================
#Thu Apr 17 13:59:38 GMT+07:00 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: README.md
================
test branch cbhieu

================
File: settings.gradle.kts
================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "btl_iot"
include(":app")
